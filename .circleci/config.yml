version: 2.0

references:
  
  container_config: &container_config
    docker:
      - image: clojure:lein-2.7.1
    working_directory: /root/frontend

  workspace_root: &workspace_root
    /tmp/workspace
    
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
      
  load_code: &load_code
    run:
      name: load code from workspace
      command: mv /tmp/workspace/frontend/* .
      
  jars_cache_key: &jars_cache_key
    key: v5-dependency-jars-{{ checksum "project.clj" }}

  js_cache_key: &js_cache_key
    key: v5-dependency-npm-{{ checksum "package.json"}}-{{ checksum "bower.json" }}
    
  restore_jars: &restore_jars
    run:
      name: Restore m2 repo from workspace
      command: |
        rm -r ~/.m2
        mv /tmp/workspace/.m2 ~/

  restore_node_modules: &restore_node_modules
    run:
      name: Restore npm dependencies from workspace
      command: mv /tmp/workspace/node_modules ./

  restore_bower_components: &restore_bower_components
    run:
      name: Restore npm/bower dependencies from workspace
      command: mv /tmp/workspace/bower_components resources/components

  install_nodejs: &install_nodejs
    run:
      name: Install node/npm
      command: |
        curl -sL https://deb.nodesource.com/setup_4.x | bash -
        apt-get install -y nodejs
    
    
jobs:
  checkout_code:
    <<: *container_config
    steps:
      - checkout
      - run:
          command: |
            mkdir -p /tmp/workspace/frontend
            mv * /tmp/workspace/frontend/
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - frontend
  clojure_dependencies:
    <<: *container_config
    steps:
      - *attach_workspace
      - *load_code
      - restore_cache:
          <<: *jars_cache_key
      - run:
          name: download dependencies
          command: |
            [[ -a /root/.m2/.circle_cache ]] || lein deps
      - run:
          name: Mark m2 repo as cached
          command: touch ~/.m2/.circle_cache
      - save_cache:
          <<: *jars_cache_key
          paths:
            - /root/.m2
      - run:
          name: Move m2 repo to workspace
          command: mv /root/.m2 /tmp/workspace/
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .m2

  npm_bower_dependencies:
    <<: *container_config
    docker:
      - image: node:4.8.3
    steps:
      - *attach_workspace
      - *load_code
      - restore_cache:
          <<: *js_cache_key
      - run:
          name: download dependencies
          command: |
            if [ ! -d node_modules -o ! -d bower_components ]; then
              set -exu
              npm install
              node_modules/bower/bin/bower --allow-root install
            fi
      - save_cache:
          <<: *js_cache_key
          paths:
            - /root/frontend/node_modules
            - /root/frontend/bower_components
      - run:
          name: Move dependencies to workspace
          command: mv node_modules bower_components /tmp/workspace/
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - node_modules
            - bower_components
          
  clojure_test:
    <<: *container_config
    steps:
      - *attach_workspace
      - *load_code
      - *restore_jars
      - run:
          name: lein test
          command: lein test

  cljs_test:
    docker:
      - image: circleci/build-image:trusty-latest
    working_directory: /home/ubuntu/frontend
    steps:
      - *attach_workspace
      - *load_code
      - run:
          name: Install JDK 8
          command: |
            sudo apt-get update
            sudo apt-get install openjdk-8-jdk
      - run:
          command: Xvfb :99 -screen 0 1280x1024x24
          background: true
      - *restore_jars
      - *restore_bower_components
      - *restore_node_modules
      - run:
          name: compile test code and run tests
          command: |
            source ~/.bashrc
            lein doo chrome test once
          
  cljsbuild_whitespace:
    <<: *container_config
    steps:
      - *attach_workspace
      - *load_code
      - *restore_jars
      - run:
          name: cljsbuild whitespace
          command: lein cljsbuild once whitespace
      - run:
          name: Move compiled cljs to workspace
          command: |
            set -exu
            mkdir -p /tmp/workspace/compiled-cljs
            mv resources/public/cljs/whitespace /tmp/workspace/compiled-cljs/
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - compiled-cljs/whitespace

  cljsbuild_production:
    <<: *container_config
    steps:
      - *attach_workspace
      - *load_code
      - *restore_jars
      - run:
          name: cljsbuild production
          command: lein cljsbuild once production
      - run:
          name: Move compiled cljs to workspace
          command: |
            set -exu
            mkdir -p /tmp/workspace/compiled-cljs
            mv resources/public/cljs/production /tmp/workspace/compiled-cljs/
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - compiled-cljs/production
            
  precompile_assets:
    <<: *container_config
    steps:
      - *attach_workspace
      - *load_code
      - *restore_jars
      - *restore_node_modules
      - *restore_bower_components
      - run:
          name: Restore compiled cljs from workspace
          command: |
            set -exu
            mkdir -p resources/public/cljs
            mv /tmp/workspace/compiled-cljs/* resources/public/cljs/
      - *install_nodejs
      - run:
          name: precompile assets
          command: |
            source ~/.bashrc
            lein run -m frontend.tasks.http/precompile-assets
      - run:
          name: Move compiled assets to workspace
          command: mv resources /tmp/workspace/assets

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - assets
            
  deploy:
    docker:
      - image: circleci/build-image:trusty-latest
    working_directory: /home/ubuntu/frontend
    steps:
      - *attach_workspace
      - *load_code
      - run:
          name: Restore compiled assets from workspace
          command: |
            rm -r resources
            mv /tmp/workspace/assets resources
      - add-ssh-keys
      - run:
          name: deploy and trigger integration tests
          command: |
            set -ex
            ssh-add -D
            script/deploy.sh
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
            curl https://api.rollbar.com/api/1/deploy/ \
            --form access_token=$ROLLBAR_ACCESS_TOKEN \
            --form environment=production \
            --form revision=$CIRCLE_SHA1 \
            --form local_username=$CIRCLE_USERNAME
            fi

workflows:
  version: 2

  build_test_deploy:
    jobs:
      - checkout_code
      - clojure_dependencies:
          requires:
            - checkout_code
      - npm_bower_dependencies:
          requires:
            - checkout_code
      - clojure_test:
          requires:
            - clojure_dependencies
            - checkout_code
      - cljs_test:
          requires:
            - clojure_dependencies
            - npm_bower_dependencies
            - checkout_code
      - cljsbuild_whitespace:
          requires:
            - clojure_dependencies
            - checkout_code
      - cljsbuild_production:
          requires:
            - clojure_dependencies
            - checkout_code
      - precompile_assets:
          requires:
            - clojure_dependencies
            - npm_bower_dependencies
            - cljsbuild_whitespace
            - cljsbuild_production
            - checkout_code
      - deploy:
          requires:
            - precompile_assets
            - cljs_test
            - clojure_test
            - checkout_code
      
dependencies:
  cache_directories:
    - "~/.cache/bower"
  post:
    - node_modules/bower/bin/bower install || (sleep 2; node_modules/bower/bin/bower install)
    - "[[ -d resources/components ]] || node_modules/bower/bin/bower install"
    - lein cljsbuild once whitespace test production
    - lein run -m frontend.tasks.http/precompile-assets


test:
  pre:
    - git grep --color TODO | cat
  post:
    - lein doo chrome test once

deployment:
  deploy:
    branch: /(?!master).+/
    commands:
      - script/deploy.sh
  track-master:
    branch: master
    commands:
      - script/deploy.sh
      - curl https://api.rollbar.com/api/1/deploy/
          --form access_token=$ROLLBAR_ACCESS_TOKEN
          --form environment=production
          --form revision=$CIRCLE_SHA1
          --form local_username=$CIRCLE_USERNAME
