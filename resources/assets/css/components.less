// A helper for defining component styles. Use .ns() to set the namespace of the
// components you're styling, then a .ui() block within it for each component.
// This is analagous to the ns and def/defrender/defui forms in ClojureScript.
//
// Usage:
//
// .ns("frontend.components.insights.project", {
//   .ui("build-status-bar-chart-hovercard", {
//     // Styles for the frontend.components.insights.project/build-status-bar-chart-hovercard component.
//   });
// });
.ns(@ns, @ns-rules) {
  @ns-rules();
};

.ui(@component, @component-rules) {
  @ui-rules-in-component();
};

// We implement this as a detached ruleset so that it can get @ns and @component
// from the dynamic scope.
@ui-rules-in-component: {
  [data-component="@{ns}/@{component}"] {
    @component-rules();
  }
};


@import "components/insights.less";
@import "components/insights/project.less";
