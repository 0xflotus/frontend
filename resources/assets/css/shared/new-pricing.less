@zindex-outer-nav: 20;
@pricing-max-parallelism: 64;
@pricing-action-height: (@tile * (2 / 3));
@pricing-action-width: (@pricing-action-height * 3);

#pricing {
  a {
    &:hover {
      i {
        path {
          stroke: @linkColorHover;
          transition: stroke 200ms;
        }
      }
    }

    i {
      path {
        stroke: @grayDark;
        stroke-width: 8;
      }
    }
  }
}

.pricing-calculator-controls {
  .make-sm-column(6);
  .make-sm-column-offset(1);
}

.pricing-calculator-section {
  .make-sm-column(4);
  .make-sm-column-offset(1);
}

.containers-range {
  .flexy(stretch, center, column);
  position: relative;
  margin: 1em 0;
  height: 5em;
  figure,
  button {
    .box-sizing(border-box);
    height: 1em;
    margin: 0;
    border-radius: 1em;
    outline: none;
  }
  .range-back {
    background: @white;
    border: 1px solid @grayBoxBorder;
  }
  .range-highlight {
    .animation(pricing-range 500ms @bezier-transform 100ms backwards);
    background: @grayDark;
    width: 0%;
    margin-top: -1em;
  }
  .range-knob {
    .animation(pricing-knob 500ms @bezier-transform 100ms backwards);
    position: absolute;
    width: 2em;
    height: 2em;
    left: 0%;
    top: 1.5em;
    margin-left: -1em;
    border-radius: 1em;
    background: @white;
    border: 1px solid @grayBoxBorder;
    &:before {
      .animation(pricing-hang 500ms @bezier-fadein 500ms backwards);
      content: attr(data-count);
      position: absolute;
      color: @grayLight;
      top: 100%;
      left: 0;
      width: 100%;
      margin-top: .25em;
      text-align: center;
    }
  }
}

.range-slider {
  .flexy(stretch, center, column);
  position: relative;
  margin: 0em 0;
  height: 3em;
  figure,
  button {
    .box-sizing(border-box);
    height: 1em;
    margin: 0;
    border-radius: 1em;
    outline: none;
  }
  .range-back {
    background: @white;
    border: 1px solid @grayBoxBorder;
  }
  .range-highlight {
    background: @grayDark;
    width: 0%;
    margin-top: -1em;
  }
  .range-knob {
    cursor: pointer;
    position: absolute;
    width: 2em;
    height: 2em;
    left: 0;
    top: 0.5em;
    margin-left: -1em;
    border-radius: 1em;
    background: @white;
    border: 1px solid @grayBoxBorder;
    &:before {
      content: attr(data-count);
      position: absolute;
      color: @grayLight;
      top: 0;
      left: 0;
      width: 100%;
      margin-top: 0.25em;
      text-align: center;
    }
  }
}

.controls-parallelism {
  strong {
    display: inline-block;
    color: @green;
    text-align: center;
    min-width: 1em;
    &.double-digits {
      min-width: 1.5em;
    }
  }
}

.parallelism-options {
  .flexy();
  margin: 3em 0;
  button {
    .box-sizing(border-box);
    .flex(1 1 20%);
    height: 3em;
    margin: 0;
    padding: 0;
    background: none;
    border: 1px solid @grayBoxBorder;
    outline: none;
    transition: 200ms;
    &:hover,
    &:active {
      background: @grayBoxBorder;
      transition: 100ms;
    }
    &.active {
      color: @white;
      background: @grayDark;
    }
    &:first-of-type {
      .animation(pricing-button 500ms @bezier-fadein 500ms backwards);
      border-radius: 1.5em 0 0 1.5em;
    }
    &:last-of-type {
      border-radius: 0 1.5em 1.5em 0;
    }
    &:not(:last-of-type) {
      border-right: none;
    }
  }
}

.pricing-calculator-preview {
  background: #fcfcfc;
  border: 1px solid @grayBoxBorder;
  border-radius: 6px;
  padding: 10px;
  h4 {
    &:first-child { // hack for specificity
      margin: 2em auto;
    }
  }
}

.calculator-preview-item {
  .flexy(center, space-between);
  margin: 0 2em 1em;
  &:last-of-type {
    color: @black;
    font-weight: bold;
  }
  i {
    svg {
      stroke: @grayLight;
      stroke-width: 8px;
      height: @fontSizeLarge;
      width: @fontSizeLarge;
    }
  }
  .value {
    min-width: 1.5em;
    .text-center;
  }
}

.pricing-action {
  .box-sizing(border-box);
  .flexy(center, center);
  margin: 2em auto;
}

.pricing-features {
  flex-wrap: wrap;
  .flexy(stretch, space-between);
}

.pricing-feature {
  @third: (100% / 3);
  .flex(0 0 ~"calc(@{third} - 1.5em)" );
}

.container-input {
  .flexy(baseline, flex-start);
}
