.inner {
  font-family: @sansSerifFontFamily;
  background-color: #f5f5f5;

  .flexy(column);
  height: 100vh;

  // Establish a stacking context.
  position: relative;
  z-index: 0;

  > .top {
    // Establish a stacking context above the rest of parent's content.
    position: relative;
    z-index: 1;

    > .bar {
      // Within the .top, stack the .bar over everything.
      position: relative;
      z-index: 2;
    }

    > .flash-presenter {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      transform: translateY(100%);

      // Within the .top, stack the .flash-presenter below the .bar.
      z-index: 1;
    }
  }

  > .below-top {
    .flexy;
    .flex(1 1 auto);

    // This looks weird, but it keeps the .below-top from taking up any more
    // than the remaining vertical space. Without this, .below-top will compute
    // its intrinsic height. Depending on its contents, this can be bigger than
    // the space its parent would like to allot for it, and it will overflow. By
    // setting the height explicitly to 0, we disable the intrinsic height. The
    // flex-grow will then allow it to grow to the size its parent allots, but
    // it will have no reason to grow any *bigger* than that. Then, any
    // descendents which would have liked to render something bigger will be
    // forced into this height (which is what we want).
    //
    // http://stackoverflow.com/questions/7813783/firefox-and-flexbox-when-using-white-space-nowrap-on-child-element-the-flexib#9737602
    height: 0;
  }

  span.strikeout {
    text-decoration: line-through;
    align: right;
  }

  .app-dominant {
    .flexy();
    .flex(1 1 auto);
    overflow: hidden;
  }

  .main-body {
    padding: 0 15px 100px;
  }

  @import "terminal.less";
  @import "builds.less";
  @import "new-build.less";
  @import "billing.less";
  @import "settings.less";
  @import "add-projects.less";
  @import "dashboard.less";
  @import "admin.less";
  @import "org.less";
  @import "invites.less";
  @import "insights.less";
  @import "icons.less";
  @import "alerts.less";

  .recent-status-badge {
    @badge-height: 25px;

    .flexy(center, flex-start);
    .invert-status-icons;

    height: @badge-height;
    min-width: 118px;
    padding: 0;

    border-radius: 2 * @badge-height;
    background: @grayLightest;

    .badge-icon {
      @badge-icon-margin: 4px;
      @badge-icon-size: @badge-height - (2 * @badge-icon-margin);

      height: @badge-icon-size;
      width: @badge-icon-size;
      margin: @badge-icon-margin (2 * @badge-icon-margin) @badge-icon-margin @badge-icon-margin;
    }

    .badge-text {
      .flex(1 0 auto);
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
      color: @white;
    }

    .invert-status-icons();

    &.pass {
      background: @green;
    }

    &.fail {
      background: @red;
    }

    &.busy {
      background: @blueLight;
    }

    &.stop {
      background: @grayLight;
    }

    &.queued {
      background: @purple;
    }
  }
}

@import "aside.less";
@import "edit-project-settings.less";

#elevio-widget,
#intercom-container {
  display: none;
}

body.circle-elevio {
  #elevio-widget {
    display: block;
  }

  #intercom-container {
    .intercom-conversations-new-conversation-button {
      display: none;
    }

    .intercom-composer-container {
      display: none;
    }
  }

  #intercom-launcher {
    display: none !important;
  }
}

#elevio-widget .support {
  p > a {
    color: @blueDark;
  }

  .elevio-box-warning .action-btn {
    display: none;
  }
}

body.circle-intercom {
  #intercom-container {
    display: block;
  }

  &:not(.circle-elevio) {
    #intercom-container #intercom-launcher {
      display: block !important;
    }
  }
}
