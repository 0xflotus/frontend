%div
  %h1 Change parallelism for this project
  %div
    .row-fluid{style: "min-height: 250px"}
      .span5
        %p
          %form.select-project-parallelization{data-bind: "foreach: parallelism_options"}
            %label{data-bind: "css: $root.project().parallel_label_style($data), attr: { for: $root.project().parallel_input_id($data)}, event: {mouseover: $root.project().parallel_focus_in}"}
              != succeed "x", ->
                %span{data-bind: "text: $data"}
              %input{type: "radio", name: "parallel", data-bind: "value: $data, checked: $root.project().editParallel, disable: $root.project().disable_parallel_input($data), click: $root.project().set_parallelism, attr: { id: $root.project().parallel_input_id($data), 'data-loading-text': $data, 'data-success-text': $data, 'data-failed-text': $data}"}


      .span6.well.focused-label{data-bind: "css: speed_description_style()"}

        %span{data-bind: "if: focused_parallel() == 1"}
          At 1x parallelism, all of your tests will run sequentially on the same machine.

        %p{data-bind: "if: focused_parallel() > 1"}
          %strong
            != succeed 'x', ->
              %span{data-bind: "text: focused_parallel"}
          runs your tests in parallel across
          %strong{data-bind: "text: focused_parallel"}
          machines to finish your build
          %strong{data-bind: "text: focused_parallel"}
          times faster.

        %p{data-bind: "if: show_number_of_simultaneous_builds_p"}
          You have
          %span{data-bind: "text: billing.containers"}
          containers, so you can run
          %span{data-bind: "text: simultaneous_builds"}
          builds at once at
          = succeed 'x.', ->
            %span{data-bind: "text: focused_parallel"}

        %p{data-bind: "if: show_uneven_divisor_warning_p"}
          %span.label.label-info
            Tip
          You can run more simultaneous builds if you choose a speed that divides your total containers evenly.

        %div{data-bind: "ifnot: billing.payor"}
          .alert.alert-warning
            %a{href: '/account/plans#organizations'} Select a plan
            to increase your maximum build speed
        / ko if: billing.payor
        %div{data-bind: "if: show_parallel_upgrade_plan_p"}
          .alert.alert-warning
            Your plan's max speed is only
            != succeed "x.", ->
              %strong{data-bind: "text: plan_max_speed"}

            %span{data-bind: "if: current_user_is_payor_p"}
              %a{href: "/account/plans#edit"} Upgrade your plan
              to unlock more speed.

            %span{data-bind: "ifnot: current_user_is_payor_p"}
              Send
              %span{data-bind: "text: payor_login"}
              to
              %a{href: "/account/plans#edit"} https://circleci.com/account/plans#edit
              to upgrade your plan.

        %div{data-bind: "if: show_parallel_upgrade_speed_p"}
          .alert.alert-warning
            %p
              You can only go up to
              != succeed "x!", ->
                %span{data-bind: "text: paid_speed"}

            %p{data-bind: "if: current_user_is_payor_p"}
              %a{href: "/account/plans#speed"} Increase your speed
              up to
              %strong
                != succeed "x.", ->
                  %span{data-bind: "text: focused_parallel"}

            %p{data-bind: "ifnot: current_user_is_payor_p"}
              Send
              %span{data-bind: "text: payor_login"}
              to
              %a{href: "/account/plans#speed"} https://circleci.com/account/plans#speed
              to increase your speed up to
              %strong
                != succeed "x.", ->
                  %span{data-bind: "text: focused_parallel"}
        / /ko

    .row-fluid{data-bind: "if: retried_build"}
      .span10
        %a.btn.btn-success{type: "submit",
                           name: "submit",
                           data-bind: "click: retried_build().visit"}
          View your latest build running at
          != succeed "x", ->
            %span{data-bind: "text: retried_build().parallel"}

    .row-fluid
      .span8
        %h3 How Parallelism Works
        %ul
          %li
            We run your tests in parallel on completely separate machines
            %ul
              %li
                No shared memory, processes, or databases
          %li
            Dramatically reduces build time
            %ul
              %li
                45 minute build fell to 18 minutes with 3x build speed
              %li
                20 minute build dropped to 11 minutes with 2x build speed
          %li
            Automatic setup for Rspec, Cucumber, Test::Unit
          %li
            Manual setup required if you've overridden the test command, or are using another test framework. See our doc
            %a{href: '/docs/parallel-manual-setup'} Parallelism Manual Setup

        %div{data-bind: "if: containers_p"}
          %h3 How containers work
          %p{data-bind: "with: billing"}
            Containers are what we call the virtual machines that your tests run in. Your current plan has
            %span{data-bind: "text: containers"}
            containers
            %span{data-bind: "if: chosenPlan().allowsParallelism"}
              and supports up to
              = succeed "x", ->
                %span{data-bind: "text: chosenPlan().max_parallelism"}
              paralellism.
            %span{data-bind: "ifnot: chosenPlan().allowsParallelism"}
              but does not support parallelism.

          %p
            With 16 containers and a plan that supports 8x parallelism, you could run
            %ul
              %li
                16 simultaneous builds at 1x parallelism
              %li
                8 simultaneous builds at 2x parallelism
              %li
                4 simultaneous builds at 4x parallelism
              %li
                2 simultaneous builds at 8x parallelism

    .row-fluid
      .span10
        %h3 Things our customers say about parallel builds
        %p
          %blockquote{ cite: "#" }
            %p
              The thing that sold us on Circle was the speed. Their tests run really really fast. We've never seen that before. One of our developers just pushes to branches so that Circle will run his tests, instead of testing on his laptop.
              %strong
                The parallelization just works - we didn't have to tweak anything.
              Amazing service.

            %small
              %cite
                %a{ href: "http://zencoder.com/company/" } Brandon Arbini
                %a{ href: "http://zencoder.com/" } VP of Product & Engineering at Zencoder.com
