.github-page
  %h2 Setup GitHub user for
    %span{data-bind: "text: project_name"}

  .github-page-inner
    %p If you wish to access multiple GitHub repos from a single project, we'll need to add a 'user key' to your or one of your collaborator's GitHub accounts. You should not delete the project's deploy key from Github. We will still use the project key to do an initial checkout that we use to configure the build.

    .authorization{data-bind: "ifnot: $root.current_user().has_public_key_scope"}
      %h4 Authorization
      %p If you want to add a 'user key' for yourself, you'll need to obtain authorization from GitHub to do so. If you want to add a 'user key' for someone else, they will need to log in to Circle and obtain authorization using their account.

      <!-- ko ifnot: $root.current_user().has_public_key_scope -->
        .request-auth{data-bind: "ifnot: $root.current_user().has_public_key_scope"}
          %a.btn.ghu-authorize{data-bind: "tooltip: { title: 'We need additional authorization to add a new SSH key to your GitHub account',
                                        animation: false }",
                 href: CI.github.authUrl(["admin:public_key", "user", "repo"])}
            %span Authorize w/ GitHub
            %i.fa.fa-github
      <!-- /ko -->

    .user-setting
      %h4 Setting the project's GitHub user
      %p If a user has already been set as the project's GitHub user, you can remove them without needing authorization from GitHub. However, as noted above you will not be able to replace that user without first obtaining authorization. 

      .request-remove-user{data-bind: "if: github_user()"}
        %input.btn{type: "submit",
                   data-bind: "click: clear_github_user,
                               tooltip: { title: 'Removes association between this project to current user',
                               animation: false },
                               value: 'Remove ' + github_user() + ' as the project\\'s GitHub user'",
                   data-loading-text: "Saving...",
                   data-success-text: "Saved"}

      <!-- ko if: !github_user() --> 
        <!-- ko if: $root.current_user().has_public_key_scope() -->
          .request-user
            %input.btn{type: "submit",
                       data-bind: "click: set_github_user,
                                   tooltip: { title: 'Makes new key for this project and associates it w/ your GitHub account',
                                     animation: false },
                                   value: 'Set GitHub project user to ' + $root.current_user().login",
                       data-loading-text: "Saving...",
                       data-success-text: "Saved"}
        <!-- /ko -->

        <!-- ko ifnot: $root.current_user().has_public_key_scope() -->
          .request-user-no-auth
            %input.btn{type: "submit",
                       disabled: true,
                       data-bind: "tooltip: { title: 'Makes new key for this project and associates it w/ your GitHub account',
                                     animation: false },
                                   value: 'You must authorize with GitHub to set the project\\'s user'",
                       data-loading-text: "Saving...",
                       data-success-text: "Saved"}
        <!-- /ko -->
      <!-- /ko -->

    .help-block
      %h2 About user keys

      %h4 What is a user key?
      %p When you add a repository to Circle, we add a 'deploy key' to your repository on GitHub. This allows us to checkout the repository from GitHub. Each deploy key is valid for only one repository, and cannot be used to access other repositories.
      %p By contrast, 'user keys' have access to all of your repositories. Some tests need to access many repositories. This particularly happens when bundle, npm or pip depend on projects in private git repos.

      %h4 When do we use user-keys?
      %p After adding a user key, we will use it to test your pushes to any private repository you're a member of. We won't use your user key for public projects, and we don't use it when another member of your project pushed.
      %p If you'd like to use it for all builds on a project, you can set yourself as the 'GitHub user' for the project from the 'GitHub user' section of the project's Settings page.

      %h4 What about security?
      %p A user key is pretty similar to your own SSH key, and should be treated as such. Just like you wouldn't run code on your personal machine which you didn't trust, you also shouldn't push code to Circle that you don't trust.

      %h4 What SSH keys do I currently have?
      %p
        Your user keys are listed in your
        != succeed '.', ->
          %a{href: "https://github.com/settings/ssh"}<
            GitHub account
