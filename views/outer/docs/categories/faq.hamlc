%article
  .title
    %h1 FAQ
      %i.icon-list-alt
    %p Last Updated: May 28, 2012
    %h4 Frequently asked questions, and questions which should be asked more frequently
    %hr

  .doc

    = HAML['heading']({title: "What happens when you add a project?", hash: "what-happens"})
    %p
      Generally, pretty much what you'd expect if you were implementing this yourself:

    %ul
      %li
        Using the permissions you gave us when you signed up, we'll add some settings to your project on GitHub:
        %ul
          %li
            A
            %b deploy key
            is used to check your project out from GitHub,
          %li
            A
            %b service hook
            is used to notify Circle when you push to GitHub.
      %li
        We immediately check your code out onto our machines, infer your settings, and run your first build.
      %li
        Our inference algorithms looks through your dependencies, Gems, libraries and code to figure out how to run your tests.
        For example, we might find that you have a standard Rails project using Postgres, with specs and features, so we'll run:
        %ol
          %li
            bundle install
          %li
            bundle exec rake db:schema:load
          %li
            bundle exec rspec spec
          %li
            bundle exec cucumber
      %li
        We run your tests on a clean virtual machine every time.
        This means that your code isn't accessible to other users, and that we run your tests freshly each time you push.
      %li
        You can watch your tests update in real-time on
        = succeed ".", ->
          %a{href: "/"} your dashboard
      %li
        We'll send you a notification when you're done.


    = HAML['heading']({title: "Does Circle look at my code?", hash: "look-at-code"})
    %p
      Nobody from Circle manually looks at your code, without permission.
      We will occasionally ask permission to debug why your code isn't working, but we will never look at your code without this permission.
      Our
      %a{ href: "/privacy#security" }
        security policy
      goes into more detail about our safeguards to ensure the security of your code.


    = HAML['heading']({title: "Does parallelism really work?", hash: "parallelism"})
    %p
      If you've ever tried a parallel testing solution, you've probably had a bad experience.
      Most attempt to run multiple tests within the same language runtime, or within multiple processses on the same system.

    %p
      Circle doesn't do that.
      We split your tests up and run them on completely different machines, which share no memory, processes or databases.
      This fixes the vast majority of the problems that people experience with parallel testing.

    %p
      Parallelism works if tests do not share any state.
      Occasionally tests share state by accident, for example through
      %a{href: "/docs/common-problems#file-ordering"}
        file-ordering bugs
      or by using the same remote 3rd-party APIs.
      Fortunately, both problems are relatively easy to solve.


    = HAML['heading']({title: "What software versions do you use?", hash: "versions"})
    %p
      See our
      %a{href: "/docs/environment"} Circle Environment
      documentation for every detail we can think to provide you.

    = HAML['heading']({title: "Can I test projects with unusual requirements?", hash: "unusual"})

    %p
      Circle is completely configurable.
      While we have a very simple setup for projects that follow established conventions, we also support many variations on the theme.

    %ul
      %li
        We support
        %a{href: "/docs/configuration#subdirectory"} running tests from a subdirectory of your repository.

      %li
        You can completely
        %a{href: "/docs/configuration"} override every single step of your tests
        with custom settings, or minor tweaks.
