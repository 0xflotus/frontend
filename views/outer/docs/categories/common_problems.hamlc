%article
  .title
    %h1 “It works on my machine”
      %i.icon-cogs
    %p Last Updated: June 5, 2012
    %h4 Common problems and their solutions.
    %hr

  .doc
    %h1.section
      %a#intro Why your tests fail
    %hr

    %p
      Any CI server is going to have a slightly different configuration to your local machine.
      Web application frameworks typically do not completely insulate your tests from the difference between operating system implementations.
      As a result, tests which work on your machine might not work on your CI server.

    %p
      Unfortunately, this does not allow you abdicate responsibility for test failures!
      Unless you've taken special care, Circle's environment is probably much closer to your deployment environment than your development box.
      (We use Linux for a start, which seems to have fallen out of favour amongst web application developers).
      As such, test failures typically raise real issues which may occur in production.

    %p
      This article discusses common problems which occur in tests, listing symptoms and suggesting solutions.
      We've filled this from real support requests and user feedback.
      If you find an error which isn't listed here, please get in touch.


    %h1.section
      %a#time-day Time-based results are one day off
    %hr

    %p
      Time-zones are fickle masters, and time-based code frequently only works in the time-zone in which it was written.
      Your code is probably tested in local time on your development machine, while Circle is in UTC.
      If that's the case, you may end up with test failures looking like this:
    %pre
      %code<>
        :preserve
          1) 1-day trial should be 1 day long
             Failure/Error: @trial.expiration.should == 14.day.from_now.to_date
             expected: Fri, 28 May 2012
                  got: Sat, 29 May 2012 (using ==)

    %p
      Fortunately, it's easy to
      %a{ href: "/docs/configuration#timezone"} change Circle's timezone
      to match yours.

    %p
      When making this change, it might be a good time to check what time zone your server is in.
      You should set Circle to use the same timezone as the servers to which you deploy, not the same time zones as your development machines.
      Otherwise you might be in for a nasty surprise when your users get a 0-day trial, but it works fine on your machine!

    %h3 Daylight savings time
    %p
      If this doesn't fix the issues, check if we're near a Daylight Savings Time transition.
      Your code won't be the first, nor will it be the last, to not properly deal with time zones.
      A common problem is that one part of the time interval you're measuring will be in Daylight savings time, and the other won't, creating a one hour discrepancy.
      This leads to a 2 hour window in which your tests might fail.

    %p
      One nice solution is to just try again, preferably at a different time of day.
      Try to avoid midnight in both your local timezone, and the time zone that Circle uses (UTC unless you
      %a{ href: "/docs/configuration#timezone"} changed
      it).


    %h1.section
      %a#time-seconds Time-based test results are a few seconds off
    %hr

    %p
      While one-day variations are your responsibility, differences of a second or so are probably bugs in Circle.

    %p
      This sort of bugs happen on slow computers running time-sensitive tests.
      Even if you don't explicitly have time sensitive tests, Selenium and other browser-based tests often rely on implicit timeouts.
      For example, if some button hasn't appeared in 3 seconds, tests start to fail.

    %p
      Circle is not susceptible to this kind of bug.
      Circle is really really fast, even without parallelism, and so this kind of error should never happen.

    %p
      If you do see timeouts, increase the timeout parameter to see if it goes away.
      If it does go away,
      %strong and the tests work on your local machine,
      this is very possibly a bug with Circle.

    %p
      Another cause of this bug is a rendering problem.
      Circle may not use the same exact browser as you use locally (this, of course, is a good thing), so it may catch a rendering bug that you don't.
      Check out
      %a{ href: "/docs/environment#browsers" } Circle's program versions
      to see if this is the case.

    %h1.section
      %a#wrong-ruby-version Circle uses the wrong Ruby version
    %hr

    %p
      We infer your Ruby version from your .rvmrc.
      If you don't have a .rvmrc file, we'll use Ruby 1.9.2 or 1.8.7, whichever we think is best.
      You can
      %a{href: "/docs/configuration#ruby-version"} control the version
      if we got it wrong.




    %h1.section
      %a#git-bundle-install Git errors during a bundle install
    %hr

    %p
      When your tests run, during the
      %code bundle install
      step, you might see something like this:

    %pre
      %code<>
        :preserve
          Fetching git@github.com:rails/rails
          Git error: command `git clone 'git@github.com:rails/rails' "/home/ubuntu/circle-2/vendor/bundle/ruby/1.9.1/cache/bundler/git/rails-47ba0391b239cf6d20fc732cd925192bcf3430fc" --bare --no-hardlinks` in directory /home/ubuntu/circle-1 has failed.
          Permission denied (publickey).
          fatal: The remote end hung up unexpectedly

    %p
      This happens because you have a git repository listed as a dependency in your Gemfile:

    %pre
      %code<>
        :preserve
          gem "rails", :git => "git://github.com/rails/rails.git"

    %p
      If the repository is public, just change the dependency to use a
      %code http
      url:

    %pre
      %code<>
        :preserve
          gem "rails", :git => "http://github.com/rails/rails"

    %p
      If the repository is private, you will need to use our "user keys" feature.
      We will be launching that this week.
      As a workaround, you can put a username and password into the url, for example:

    %pre
      %code<>
        :preserve
          gem "big-secret", :git => "http://paul:mypassword@github.com/circleci/big-secret"


    %h1.section
      %a#wrong-commands Circle is running the wrong commands
    %hr

    %p
      Circle infers your test settings from the code in your repository, typically looking at the packages you use.
      Most problems occur when there is some error in how the packages are specified.

      Some of the most common problems:


    %h2#missing-gemfile-lock (Ruby) Do you have a Gemfile.lock checked in?

    %p
      If you only have a Gemfile checked in, it is easy for us to make mistakes.
      This commonly causes us to call
      %code spec
      instead of
      = succeed ',', ->
        %code rspec
      or use the wrong database.
      You should check in your Gemfile.lock if possible (as an experiment, try checking it in on a branch to see if it fixes the problem).



    %h2#wrong-dependencies (Ruby) Have you listed all your dependencies?

    %p
      Circle always prefixes its commands with
      = succeed '.', ->
        %code bundle exec
      This ensures that the only gems used are the ones specified in the Gemfile.
      Unfortunately, developers commonly omit gems from their Gemfiles, but do not notice because they have them installed locally.
      Run your test command locally with the
      %code bundle exec
      prefix to check this (if it works locally with that command, this isn't the problem).



    %h2#wrong-groups (Ruby) Are you using the correct groups?
    %p
      We only install gems that are in the
      %code :test
      group.
      This includes all gems that have no specified group, or that explicitly specify the
      %code :test
      group.
      A common problem is to need gems which have only been put in the
      %code :development
      or
      %code :assets
      group.

    %p
      %b
        (See also:
        = succeed ')', ->
          %a{href: "#wrong-dependencies"} Have you listed all your dependencies?



    %h2#wrong-database
      (Ruby) Do you have two databases in your
      %code :test
      group?

    %p
      This can often lead to incorrectly setting up databases, in particular, creating an incorrect
      %code database.yml
      file.



    %h1.section
      %a#capybara-timeout (Ruby) "unable to obtain stable firefox connection in 60 seconds"
    %hr

    %p
      There have been a number of bugs in selenium-driver that cause this error.
      Try updating your selenium-webdriver gem to 2.21.2 or later.


-# migrate takes forever
-# Are you sure you're using the right version of X
-# ruby keys
-# gem wont compile - gcc or ruby 1.8.7
-# no database.yml
-# if FS dependencies, run tests individually to see if they work.
-# maybe git clean first
-# often updating to newer gem versions fixes problems. You'd be surprised how often that happens