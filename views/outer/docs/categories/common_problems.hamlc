%article
  = HAML['article_title']({icon: "icon-cogs", title: '“It works on my machine”', lastUpdated: "Aug 1, 2012", subtitle: "Common problems and their solutions"})
  .doc

    = HAML['heading']({title: "Why your tests fail", hash: "intro"})
    %p
      Any CI server is going to have a slightly different configuration to your local machine.
      Web application frameworks typically do not completely insulate your tests from the difference between operating system implementations.
      As a result, tests which work on your machine might not work on your CI server.

    %p
      Unfortunately, this does not allow you abdicate responsibility for test failures!
      Unless you've taken special care, Circle's environment is probably much closer to your deployment environment than your development box.
      (We use Linux for a start, which seems to have fallen out of favour amongst web application developers).
      As such, test failures typically raise real issues which may occur in production.

    %p
      This article discusses common problems which occur in tests, listing symptoms and suggesting solutions.
      We've filled this from real support requests and user feedback.
      If you find an error which isn't listed here, please get in touch.

    = HAML['heading']({title: "Code which should not run on your CI server", hash: "dont-run"})
    %p
      If there is code which should not be run on your CI server, you can wrap it in a conditional statement in your codebase.
      Circle has set the
      %code CI
      environmental variable, which can be used from within your application.

    %pre
      %code.ruby<>
        :preserve
          if !ENV['CI']
            Debugger.initialize!
          end


    = HAML['heading']({title: "File-ordering bugs manifest on Linux systems", hash: "file-ordering"})
    %p
      If your tests work on your local machine, but fail randomly on Circle, the most likely culprit is the dreaded file-ordering bug.
      Fortunately, if you understand your code base and your tests, fixing your tests can be quite simple.

    %h2 How file-ordering affects tests
    %p
      Many tests libraries, including Rspec, load all the test files in a certain directory, and then run them.
      This means that the order they run the tests depends on how the files are ordered in the test directory.

    %p
      On OSX, directory contents are always ordered the same, due to OSX's HFS+ file system.
      On Linux machines however, directory contents do not have a defined order.

    %p
      This means every OSX system will run tests in the same order, but different linux machines will run tests in different orders.
      With Circle, where you get a new Linux machine each time you push, the tests will run in different orders on different test runs.
      This explains why a revision's tests will sometimes fail, only to pass when retried.

    %h2 Why these tests fail
    %p
      So why do tests fail when they are run in different orders?
      Two major reasons: application code is loaded in a different order, or tests are not sufficiently independent.

    %h3 Loading application code in a different order
    %p
      Test code loads application code in order to test it.
      If you always run
      %code ardvark.rb
      before
      %code bunny.rb
      then
      %code bunny.rb
      might rely on code loaded by
      = succeed ".", ->
        %code ardvark.rb
      If you run
      %code bunny.rb
      first, the code it needs won't have been loaded.
      Here's a fine example of this, extracted from customer tests:

    %pre
      %code.no-highlight<>
        :preserve
          Failure/Error: token = ApiTokenGenerator.generate(@user.id)
            NameError:
              uninitialized constant ApiTokenGenerator::Seed
              # ./vendor/bundle/ruby/1.9.1/gems/rake-0.9.2.2/lib/rake/ext/module.rb:36:in `const_missing'
              # ./app/controllers/api_token_generator.rb:5:in `generate'

    %p
      This particular error can be fixed by ensuring that
      %code ApiTokenGenerator::Seed
      has been declared before it is used, typically by adding a
      %code require
      call to
      = succeed '.', ->
        %code api_token_generator.rb


    %p
      Another manifestation of this bug in Rails looks like this:

    %pre
      %code.no-highlight<>
        :preserve
          /home/ubuntu/circle-1/app/models/action.rb:1:in `<top (required)>': superclass mismatch for class Action (TypeError)
          from /home/ubuntu/circle1/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.6/lib/active_support/dependencies.rb:251:in `require'
          from /home/ubuntu/kera-25/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.6/lib/active_support/dependencies.rb:251:in `block in require'

    %p
      This usually happens when a model and another class have the same name.
      When the model is initialized first, everything works, because the second use simply reopens the class.
      When the model is initialized second, you get a <i>superclass mismatch</i>.
      Solve this by renaming the non-model.


    %h3 Tests are not sufficiently independent
    %p
      If you have two tests that are always run one after the other, you might not realize that the second test depends on some initialization in the first test.
      If the tests are in the same file, this is often benign.
      If the tests are in different files, then they might end up run in the wrong order, and they will fail.

    %p
      These <i>test-ordering</i> bugs typically manifest as tests which sometimes pass and sometimes fail.
      This distinguished them from <i>application loading-order</i> bugs because the application actually loads and starts running tests.

    %p
      The fix here is to remove the test interdependencies.
      They are a bad idea.
      Tests should always be idempotent, where possible.

    %h2 Reproducing the bugs?
    %p
      The hardest part of fixing the bugs is reproducing the errors.
      The goal is to get a short command that you can run on your local machine which reproduces the error.

    %p
      For <b>test-ordering</b> bugs, use your test suite's commands to run only a minimal set of tests, or just the failing test.
      Often, it will fail by itself because it depends on another test's results.
      If this doesn't isolate it, the bug may be that another test leaves state behind, which interfere's with the failing test.
      Another way to expose the problem is by using your test suite's random-ordering functionality, such as <code>RSpec</code>'s <code>--order</code>.

    %p
      For <b>application load-ordering</b> bugs, restricting the files which are loaded can help expose the issue.
      Many test suites such as <code>RSpec</code> let you list test files to be loaded on the command-line.
      This will allow you to just load the code which a test <i>thinks</i> it needs, often pointing to an overlooked dependency.

    %p
      Finally, if you still can't do reduce the test case, Circle's SSH feature is a useful way to debug the error on our actual virtual machines.
      It will create a machine, start the tests running, and let you SSH in to debug.


    = HAML['heading']({title: "A directory is missing from your repository", hash: "missing-log-dir"})
    %p
      Rails expects certain directories to be present in your app, including
      %code log/
      and occasionally others.
      If they are not in your repository, your tests will fail (though they ran fine locally because you created the directory a long time ago).
    %p
      To fix this, simply add the directory to your repository.
      Git doesn't allow you to add directories to it, but the standard idiom is instead to add a file called
      %code .gitkeep
      within the directory.
      So this should solve your problem:

    %pre
      %code.bash<>
        :preserve
          $ touch log/.gitkeep
          $ git add log/.gitkeep
          $ git commit

    = HAML['heading']({title: "An important file is missing from your repository", hash: "missing-file"})
    %p
      Developers commonly omit certain files from their repositories, especially files containing application settings, passwords and API keys.
      However, these files can be essential for the proper running of their programs, and often contain settings which can't be reasonable inferred by Circle.

    %p
      If you wish to remove important files from your repository, you should add a rough copy of the file under a similar name, such as
      = succeed ".", ->
        config/app.yml.ci

      You can then copy it to its correct place with some simple commands:

    %pre
      %code.bash<>
        :preserves
          checkout:
            post:
              - cp config/app.yml.ci config/app.yml

    %p
      For a
      %code database.yml
      file, it's even simpler - just include it without the important settings like production and staging database keys.


    = HAML['heading']({title: "Time-based results are one day off", hash: "time-day"})

    %p
      Time-zones are fickle masters, and time-based code frequently only works in the time-zone in which it was written.
      Your code is probably tested in local time on your development machine, while Circle is in UTC.
      If that's the case, you may end up with test failures looking like this:
    %pre
      %code.no-highlight<>
        :preserve
          1) 1-day trial should be 1 day long
             Failure/Error: @trial.expiration.should == 14.day.from_now.to_date
             expected: Fri, 28 May 2012
                  got: Sat, 29 May 2012 (using ==)

    %p
      Fortunately, it's easy to
      %a{ href: "/docs/configuration#timezone"} change Circle's timezone
      to match yours.

    %p
      When making this change, it might be a good time to check what time zone your server is in.
      You should set Circle to use the same timezone as the servers to which you deploy, not the same time zones as your development machines.
      Otherwise you might be in for a nasty surprise when your users get a 0-day trial, but it works fine on your machine!

    %h3 Daylight savings time
    %p
      If this doesn't fix the issues, check if we're near a Daylight Savings Time transition.
      Your code won't be the first, nor will it be the last, to not properly deal with time zones.
      A common problem is that one part of the time interval you're measuring will be in Daylight savings time, and the other won't, creating a one hour discrepancy.
      This leads to a 2 hour window in which your tests might fail.

    %p
      One nice solution is to just try again, preferably at a different time of day.
      Try to avoid midnight in both your local timezone, and the time zone that Circle uses (UTC unless you
      %a{ href: "/docs/configuration#timezone"} changed
      it).


    = HAML['heading']({title: "Time-based results are a few seconds off", hash: "time-seconds"})
    %p
      While one-day variations are your responsibility, differences of a second or so are probably bugs in Circle.

    %p
      This sort of bugs happen on slow computers running time-sensitive tests.
      Even if you don't explicitly have time sensitive tests, Selenium and other browser-based tests often rely on implicit timeouts.
      For example, if some button hasn't appeared in 3 seconds, tests start to fail.

    %p
      Circle is not susceptible to this kind of bug.
      Circle is really really fast, even without parallelism, and so this kind of error should never happen.

    %p
      If you do see timeouts, increase the timeout parameter to see if it goes away.
      If it does go away,
      %strong and the tests work on your local machine,
      this is very possibly a bug with Circle.

    %p
      Another cause of this bug is a rendering problem.
      Circle may not use the same exact browser as you use locally (this, of course, is a good thing), so it may catch a rendering bug that you don't.
      Check out
      %a{ href: "/docs/environment#browsers" } Circle's program versions
      to see if this is the case.


    = HAML['heading']({title: "Circle uses the wrong Ruby version", hash: "wrong-ruby-version"})
    %p
      We infer your Ruby version from your .rvmrc.
      If you don't have a .rvmrc file, we'll use Ruby 1.9.2 or 1.8.7, whichever we think is best.
      You can
      %a{href: "/docs/configuration#ruby-version"} control the version
      if we got it wrong.



    = HAML['heading']({title: "Git errors during a bundle install", hash: "git-bundle-install"})
    %p
      When your tests run, during the
      %code bundle install
      step, you might see something like this:

    %pre
      %code.no-highlight<>
        :preserve
          Fetching git@github.com:rails/rails
          Git error: command `git clone 'git@github.com:rails/rails' "/home/ubuntu/circle-2/vendor/bundle/ruby/1.9.1/cache/bundler/git/rails-47ba0391b239cf6d20fc732cd925192bcf3430fc" --bare --no-hardlinks` in directory /home/ubuntu/circle-1 has failed.
          Permission denied (publickey).
          fatal: The remote end hung up unexpectedly

    %p
      This happens because you have a git repository listed as a dependency in your Gemfile:

    %pre
      %code.ruby<>
        :preserve
          gem "rails", :git => "git://github.com/rails/rails.git"

    %p
      If the repository is public, just change the dependency to use a
      %code http
      url:

    %pre
      %code.ruby<>
        :preserve
          gem "rails", :git => "http://github.com/rails/rails"

    %p
      If the repository is private, you will need
      %a{href: "https://circleci.com/account/ssh"}
        enable user keys
      from your account settings.


    = HAML['heading']({title: "Circle is running the wrong commands", hash: "wrong-commands"})
    %p
      Circle infers your test settings from the code in your repository, typically looking at the packages you use.
      Most problems occur when there is some error in how the packages are specified.

    %p
      If you require custom commands, it obviously won't be possible for Circle to infer them correctly.
      In that case, you can
      %a{href: "/docs/configuration"} specify your commands
      using a
      %code circle.yml
      file.

    %p
      If you feel we should have inferred your commands correctly, your project may diverge slightly from what we expect.
      Some of the most common problems:


    %h2#missing-gemfile-lock (Ruby) Do you have a Gemfile.lock checked in?

    %p
      If you only have a Gemfile checked in, it is easy for us to make mistakes.
      This commonly causes us to call
      %code spec
      instead of
      = succeed ',', ->
        %code rspec
      or use the wrong database.
      You should check in your Gemfile.lock if possible, or manually add your test steps.



    %h2#wrong-dependencies (Ruby) Have you listed all your dependencies?
    %p
      Circle always prefixes its commands with
      = succeed '.', ->
        %code bundle exec
      This ensures that the only gems used are the ones specified in the Gemfile.
      Unfortunately, developers commonly omit gems from their Gemfiles, but do not notice because they have them installed locally.
      Run your test command locally with the
      %code bundle exec
      prefix to check this (if it works locally with that command, this isn't the problem).



    %h2#wrong-groups (Ruby) Are you using the correct groups?
    %p
      We only install gems that are in the
      %code :test
      group.
      This includes all gems that have no specified group, or that explicitly specify the
      %code :test
      group.
      A common problem is to need gems which have only been put in the
      %code :development
      or
      %code :assets
      group.

    %p
      %b
        (See also:
        = succeed ')', ->
          %a{href: "#wrong-dependencies"} Have you listed all your dependencies?



    %h2#wrong-database
      (Ruby) Do you have two databases in your
      %code :test
      group?

    %p
      This can often lead to incorrectly setting up databases, in particular, creating an incorrect
      %code database.yml
      file.

    = HAML['heading']({title: "Do you need the latest version of Bundler", hash: "bundler-latest"})
    %p
      If you use Heroku, you probably already use the latest version of bunlder.
      Circle uses a slightly older version, but can be easily set to upgrade to the latest version.
      Just add the following to your
      %a{href: "/docs/configuration"}
        circle.yml
      file.

    %pre
      %code.bash<>
        :preserves
          dependencies:
            pre:
              - gem uninstall bundler
              - gem install bundler --pre


    = HAML['heading']({title: "\"unable to obtain stable firefox connection in 60 seconds\"", hash: "capybara-timeout"})
    %p
      This is an issue with the selenium-webdriver gem,
      As Firefox updates to newer revisions, the interface used by selenium-webdriver can break.
      Fortunately, the fix is pretty easy.

    %p
      Update to a new version of the selenium-webdriver gem in your Gemfile, if possible to the latest version.
      While some Circle users have had success with 2.5, others have had to update to 2.21 or 2.22.
      Updating to the
      %a{href: "http://rubygems.org/gems/selenium-webdriver"}
        latest revision
      is probably your best bet.



-# migrate takes forever
-# Are you sure you're using the right version of X
-# gem wont compile - gcc or ruby 1.8.7
-# no database.yml
-# if FS dependencies, run tests individually to see if they work.
-# maybe git clean first
-# often updating to newer gem versions fixes problems. You'd be surprised how often that happens

-# did you try googling the problem

-# - is that file in any way affected by other tests, or the order of file-system traversals? OSX has ordered file traversals while Linux does not, and this sometimes leads to weird errors.

-# - if you run the test multiple times locally, does it always work? if not, then it might just be a race?
-# are you running the tests right - no shortcuts around bundle exec for example?