- @parents = [ "reference" ]
- @icon = "icon-book"
- @title = 'Configuring Circle'
- @lastUpdated = "April 29, 2013"
- @subtitle = "Tweak almost any setting you need"

= HAML['heading']({title: "Overview", hash: "overview"})


%p
  Circle automatically infers your settings from your code, so Circle's normal processing works just fine in most circumstances.  
  When it doesn't, the
  %code circle.yml
  file makes it easy to tell Circle what you need.
  This is a simple YAML file where you spell out any tweaks needed for your web app.
  You place the file in your git repository's root directory, and Circle reads the file each time it runs a build.
  
%p
  If you're adding
  %code circle.yml
  for the first time, you can avoid annoying your colleagues by experimenting in a branch.
  
%p
  Should you have a test failure, our
  %a{ href: "/docs/troubleshooting" } troubleshooting section
  can likely tell you the best way to solve the problem.
  If you find yourself repeateadly consulting this guide, please 
  = HAML['contact_us']()
  and let us know what you're working on. 
  We will endeavor to make it easier for you.
  

%p
  If you want a quick look at how to set up your
  %code circle.yml
  file, check out our 
  = succeed '.', ->
    %a{href: "/docs/config-sample"} sample file
    

  Feel free to use it as a template. 
  
%p
  One more thing before we get to the nitty-gritty details&mdash;most projects should put the
  %code circle.yml
  file in their repository's root directory.
  However, if you store the application code in a subdirectory instead of the root, putting the
  %code circle.yml
  file in that subdirectory tells Circle to use that subdirectory for your tests.
  

= HAML['heading']({title: "File structure and content", hash: "phases"})

%p
  The
  %code circle.yml
  file is made up of six sections.
  Each section represents a
  %em phase
  of running your tests:

%ul
  %li <b>machine</b>: adjusting the VM to your preferences and requirements
  %li <b>checkout</b>: checking out and cloning your git repository
  %li <b>dependencies</b>: setting up your project's language-specific dependencies
  %li <b>database</b>: preparing the databases for your tests
  -#%li <b>compile</b>: compiling your code or assets (if necessary)
  %li <b>test</b>: running your tests
  -#%li <b>artifact</b>: uploading your artifacts for distribution
  %li <b>deployment</b>: deploying your code to your web servers

%p
  Rememer that most projects won't need to specify anything for most of the phases.
  Any phases that are not specified will be inferred from your code.



%p
  The sections contain lists of bash commands.
  Commands are run in the order they appear in the file, and stop when any command returns a non-zero exit code.
  You can modify which commands are run by adding 
  %code override
  ,
  %code pre
  , and/or
  %code post
  when needed to adjust Circle's inferred commands.
  Here is how it works:
  

%ul
  %li <b>pre</b>: commands run before Circle's inferred commands
  %li <b>override</b>: commands run instead of Circle's inferred commands
  %li <b>post</b>:  commands run after Circle's inferred commands


%p
  Each command is run in a separate shell.
  As such, they do not share environment with their predecessors, so be aware that 
  %code export MYVAR=MYVAL
  in particular does not work. 
  If you'd like to set an environment variable globally, you can specify them in the <a href="#machine">Machine configuration</a> section, described below.

%p
  Commands can be tweaked individually by adding a modifier.
  We will explain more about that in the Dependencies  Section. 
  
  


= HAML['heading']({title: "Machine configuration", hash: "machine"})

%p
  The 
  %code machine
  section enables you to configure the virtual machine that runs your tests.
  
%p 
  Here is an illustration of the types of things you might typically set in the 
  %code machine:
  section of the file.

%pre
  %code.no-highlight<>
    :preserve
      machine:
        timezone:
          America/Los_Angeles
        ruby:
          version: 1.9.3-p0-falcon

      test:
        post:
          \- bundle exec rake custom:test:suite

%p
  This example sets the
  = succeed ",", ->
    %a{ href: "#timezone" }<
      time zone
  chooses a
  %a{href: "#ruby-version"} Ruby version
  and patchset,
  and adds a
  %a{href: "#post-test"} custom test command
  to run after the rest of your commands.    


%p
  Although
  %code override
  does nothing,
  %code pre
  and
  %code post
  are supported in the
  %code machine
  section.
  The following example shows how to install <code>phantomjs</code>:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        pre:
          - curl -k -L -o phantomjs.tar.bz2 http://phantomjs.googlecode.com/files/phantomjs-1.8.2-linux-x86_64.tar.bz2
          - tar -jxf phantomjs.tar.bz2

%h4#timezone
  Timezone

%p
  The machine's time zone is UTC by default. 
  You use 
  %code timezone
  to change the setting to the same time zone as your <i>production</i> server.
  Changing this setting to your <i>development</i> machine's time zone is <b>asking for trouble</b>. 
  
%p  
  This setting tells Circle to 
  overwrite
  %code /etc/timezone
  and then restart all databases and services that rely on it.
  This setting supports any time zone listed in the IANA time zone database.
  You can find this by looking in
  %code /usr/share/zoneinfo/
  on your Unix machine, or in the
  %strong TZ
  column in
  = succeed ".", ->
    %a{href: "http://en.wikipedia.org/wiki/List_of_tz_database_time_zones"}<
      Wikipedia's list of TZ database time zones

%p
  Be aware that some developers, especially those that collaborate across different time zones, do use UTC on their production servers.
  This alternative can avoid horrific Daylight Saving Time (DST) bugs.

%h4#hosts
  Hosts

%p
  When you need to add entries to the /etc/hosts file, this is example of how to do that. 

%pre
  %code.no-highlight<>
    :preserve
      machine:
        hosts:
          circlehost: 127.0.0.1
          foobar: 1.2.3.4

%p
  In this example, the tests connect to "circlehost" -- the established name of webserver.

%h4
  %a#environment{href: "#environment" }
    Environment Variables

%p
  Sets environment variables for all commands in the build.

%pre
  %code.no-highlight<>
    :preserve
      machine:
        environment:
          foo: bar
          baz: 123

%p
  Circle uses a new shell for every command, so a standard "export
  FOO=bar" won't work. If you only need to set an environment
  variable for a single command, that is covered below.

%h4#ruby-version
  Ruby version

%p

%p
  Circle uses
  %a{ href: "https://rvm.io/" } RVM
  to manage Ruby versions.
  If you do not specify a version, we either use 
  Ruby
  %code 1.9.2-p290
  or the version in your
  %code .rvmrc
  file. 
  If you use a different Ruby version manager, such as
  %a{ href: "https://github.com/sstephenson/rbenv/" } rbenv
  , let Circle know by including that information in the 
  %code machine 
  section. Here's an example.

  
%pre
  %code.no-highlight<>
    :preserve
      machine:
        ruby:
          version: 1.9.3-p0-falcon



%h3#node-js-version
  Node.js version

%p
  Choose the version of Node.js used for your tests, for example:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        node:
          version: 0.6.18

%p
  Circle uses
  %a{ href: "https://github.com/creationix/nvm" } NVM
  to manage Node versions.

  If you do not specify a version, we will use 0.8.2. Note that
  recent versions of NVM support selecting versions through
  package.json. If your version of NVM supports this, we recommend
  you use it.

%h3#java-version
  Java version

%p
  Choose the version of Java used for your tests, for example:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        java:
          version: openjdk7

%p
  The allowed versions are
  %ul
    %li
      %code oraclejdk7 (default)
    %li
      %code openjdk7
    %li
      %code openjdk6

%h3#php-version
  PHP version

%p
  Choose the version of PHP used for your tests, for example:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        php:
          version: 5.4.5

%p
  The allowed versions are:
  - php_versions = ["5.2.17", "5.3.3", "5.3.10", "5.3.20", "5.4.0", "5.4.1", "5.4.2", "5.4.3", "5.4.4", "5.4.5", "5.4.6", "5.4.7", "5.4.8", "5.4.9", "5.4.10"]
  .row
    - cols = 4
    - per_col = (Math.ceil(php_versions.length / 4.0))
    - for i in [0..cols]
      .span2
        %ul
          - for v in php_versions[(i*per_col)...((i+1)*per_col)]
            %li
              %code
                = v

%p
  Circle uses
  %a{href: "https://github.com/CHH/php-build"} php-build
  and
  %a{href: "https://github.com/CHH/phpenv"} phpenv
  to manage PHP versions.
%p
  Are you using a version of PHP that isn't included above?
  = HAML['contact_us']({succeed: '.'})


= HAML['heading']({title: "Checking out your code from GitHub", hash: "checkout"})

%p
  The checkout phase has no special sections.
  The standard sections are available:

%ul
  %li <b>pre</b>: a list of commands run before checkout
  %li <b>override</b>: a list of commands run instead of Circle's checkout commands
  %li <b>post</b>: a list of commands run after checkout


%h4 Example 1: using git submodules

%pre
  %code.bash<>
    :preserves
      checkout:
        post:
          - git submodule init
          - git submodule update

%h4 Example 2: Overwriting configuration files for Circle
%pre
  %code.bash<>
    :preserves
      checkout:
        post:
          - mv config/.app.yml config/app.yml

= HAML['heading']({title: "Project-specific dependencies", hash: "dependencies"})

%p
  Most web programming languages and frameworks have some form of dependency specification, including Ruby's bundler, Node.js' npm and Python's pip.
  Circle runs these commands to automatically fetch dependencies.

%p
  We support the standard sections:

%ul
  %li <b>pre</b>: a list of commands run before installing dependencies
  %li <b>override</b>: a list of commands run instead of Circle's inferred dependency commands
  %li <b>post</b>: a list of commands run after installing dependencies


%h4 Example 1: using npm and Node.js:

%pre
  %code.bash<>
    :preserves
      dependencies:
        override:
          - npm install --dev

%h4 Example 2: using a specific version of bundler:

%pre
  %code.bash<>
    :preserves
      dependencies:
        pre:
          - gem uninstall bundler
          - gem install bundler --pre

%h4 Bundler flags

%p
  There is an additional section for Bundler, the dependency management program for Ruby

%ul
  %li <b>without</b>: a list of dependency groups to be excluded from bundle install

%pre
  %code.bash<>
    :preserves
      dependencies:
        bundler:
          without: [production, osx]

%h4 Custom Cache Directories

%p
  Circle makes an effort to cache dependencies between builds. For common layouts, this
  optimization will "just work". For uncommon cases, the <b>cache_directories</b> section
  can list any additional directories you'd like cached between builds:

%pre
  %code.bash<>
    :preserves
      dependencies:
        cache_directories:
          - "custom_1"   # relative to the build directory
          - "~/custom_2" # relative to the user's home directory

= HAML['heading']({title: "Database setup", hash: "database"})

%p
  Your web framework will typically include commands to create your database, install your schema and run your migrations.
  The standard sections are available:

%ul
  %li <b>pre</b>: a list of commands run before setting up databases
  %li <b>override</b>: a list of commands run instead of Circle's inferred database setup commands
  %li <b>post</b>: a list of commands run after setting up databases.

%p
  If our inferred database.yml isn't working for you, then you can override our setup commands. Please
  = HAML["contact_us"]()
  if you do, so that we can improve our inference.

%p
  %pre
    %code.bash<>
      :preserves
        database:
          override:
            - mv config/database.ci.yml config/database.yml
            - bundle exec rake db:create db:schema:load --trace

%p
  If you store your database config in environment variables, then you can export them in the machine section.
%p
  %pre
    %code.bash<>
      :preserves
        machine:
          environment:
            DATABASE_URL: postgres://ubuntu:@127.0.0.1:5432/circle_test

= HAML['heading']({title: "Running your tests", hash: "test"})

%p
  The most important part of testing: actually running the tests!
  As always, pre, post and override commands are supported:


%ul
  %li <b>pre</b>: a list of commands to run before the tests are run
  %li <b>override</b>: replace our inferred test commands with a list of your choosing
  %li <b>post</b>: a list of commands to run after the tests are run, typically more tests

%p
  Additionally, the following options are allowed:

%ul
  %li
    <b>minitest_globs</b>: a list of file globs. By default, when using parallelization, Circle
    will run all tests in the test/unit, test/integration and
    test/functional directories. Setting this option will replace the
    standard directories with your own. This is only needed when using
    parallelization with Minitest, and you have additional or non-standard
    test directories.

%h5 Example 1: Running spinach after RSpec:

%pre
  %code.bash<>
    :preserves
      test:
        post:
          - bundle exec rake spinach:
              environment:
                RAILS_ENV: test

%h5 Example 2: Running phpunit on a special directory

%pre
  %code.bash<>
    :preserves
      test:
        override:
          - phpunit my/special/subdirectory/tests

%h5 Example 3: Minitest globs

%pre
  %code.bash<>
    :preserves
      test:
        minitest_globs:
          - test/integration/**/*.rb
          - test/extra-dir/**/*.rb

= HAML['heading']({title: "Notifications", hash: "notify"})

%p
  Our normal notifications are sent by email, and can be configured on a per-user basis.
  In addition, we allow sending notifications on a per-project basis.

%p
  Currently, we support sending web-hooks when your build completes.
  We also support HipChat notifications, which are configured from your project's
  %em settings
  page.

%pre
  %code<>
    :preserves
      notify:
        webhooks:
          # A list of hashes representing hooks. Only the url field is supported.
          - url: https://circleci.com/hooks/circle

%p
  This sends a JSON packet to the specified URL.
  The JSON packet that will be sent can also be read using the REST API.
  Visit
  %code https://circleci.com/api/v1/project/:username/:projectname/:build
  to see an example.

= HAML['heading']({title: "Deployment", hash: "deployment"})

%p
  You can run commands at the end of the build, to deploy to
  staging or production. Deployment commands are only run if the
  build was successful.

%pre
  %code.bash<>
    :preserves
      deployment:
        production:
          branch: production
          commands:
            - ./deploy_prod.sh
        staging:
          branch: master
          commands:
            - ./deploy_staging.sh


%p

  Deployment consists of multiple sections. In this case, there
  are two sections, one named 'production', and one named
  'staging'. Section names must be unique. The section must
  contain a field named branch. There can be multiple sections,
  and the first one that matches the branch being built will be
  run.

%p
  The deployment commands will only be run if the build is
  green. A section can also list multiple branches

%pre
  %code.bash<>
    :preserves
      deployment:
        automerge:
          branch: [dev_alice, dev_bob, dev_carol]
          commands:
            - ./merge_to_master.sh

%p
  In this example, if a developer pushes to any of the branches listed, the script
  %code merge_to_master.sh
  will be run.

%h4 SSH Keys
%p
  If deploying to your servers requires SSH access, you'll need to
  upload the keys to Circle.  Edit the project in the UI, then
  click the SSH keys button. Upload one or more SSH keys necessary
  for deploying to your machines. If the hostname field is blank,
  the key will be used for all hosts.


%h3 Heroku

%p
  We also have first-class support for deploying to Heroku.
  Specify the app you'd like to
  %code git push
  to under <code>appname</code>.
  Upon a successful build, we'll automatically deploy to the app in the section which matches the push, if there is one.

%pre
  %code.bash<>
    :preserves
      deployment:
        staging:
          branch: master
          heroku:
            appname: foo-bar-123

%p
  Using our deployment to Heroku requires one extra step.
  Due to Heroku's architecture and security model, we need to deploy as a particular user.
  A member of your project, possibly you, will need to register as that user.
  You can do this on your project's settings page on Circle.

%h3 Heroku with pre or post-deployment steps
%p
  If you want to deploy to Heroku, and you'd like to run commands before or after the deploy, you'll have to use the 'normal' deployment syntax

%pre
  %code.bash<>
    :preserves
        deployment:
          production:
            branch: production
            commands:
              - git push git@heroku.com:foo-bar-123.git $CIRCLE_SHA1:master
              - heroku run rake db:migrate --app foo-bar-123


%p
  We are adding support for configuring every part of your build.
  If you need to tweak something that isn't currently possible, please
  = HAML["contact_us"]()
  and we'll figure something out.
  
  %p 
  Here is a brief description of the types of things you might set in your
  %code circle.yml
  file. 
  This example uses an excerpt from the 
  %code machine:
  section of the file.

%pre
  %code.no-highlight<>
    :preserve
      machine:
        timezone:
          America/Los_Angeles
        ruby:
          version: 1.9.3-p0-falcon

      test:
        post:
          \- bundle exec rake custom:test:suite

%p
  This sets the
  = succeed ",", ->
    %a{ href: "#timezone" }<
      time zone
  chooses a
  %a{href: "#ruby-version"} Ruby version
  and patchset,
  and adds a
  %a{href: "#post-test"} custom test command
  to run after the rest of your commands.
  
  For example, changing a command's timeout:

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        override:
          - bundle install:
              timeout: 180

%p
  Allowed modifiers are:

%ul
  %li <b>timeout</b>: If a command runs this many seconds without output, kill it. Defaults to 180s.
  %li <b>pwd</b>: Run your commands using this value as its current working directory. By default, commands are run in the checkout directory, named after your project name.
  %li <b>environment</b>: A hash creating a list of environmental variables set for this command.
  %li <b>parallel</b>: If true, run this command in parallel across all build VMs.

%p For example:

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        override:
          - bundle install:
              timeout: 180
              environment:
                MYVAR: MYVAL
                MYVAR2: MYVAL2
              pwd:
                test_dir

%p
  Note in particular that the modifiers are indented one level from their command.
  In the YAML above,
  %code bundle install
  is a key whose value is a hash containing <code>timeout</code>, <code>environment</code> and <code>pwd</code>.





