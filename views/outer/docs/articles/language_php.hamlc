- @title = 'Continuous Integration and Continuous Deployment with PHP'
- @short_title = 'PHP'
- @lastUpdated = "Jun 19, 2013"


%h2 Overview

%p
  Circle works seamlessly with all the tools and package managers,
  such as <code>composer</code>, that help PHP developers test and deploy their code.
  Circle looks at your code and determines what version of PHP you use.
  We run your specified tests.
  Circle has your project's DB requirements covered because we have pre-installed
  the most-used databases.
  To complete the process, we can&mdash;if you tell us where&mdash;deploy your code once your build is green.

%p
  If your project has any special requirements, tell us about them by including a
  %a{href: "/docs/configuration"} circle.yml
  file in your repo.

%h2 Version

%p
  Circle supports more than a dozen
  %a{href: "/docs/environment#php"} versions of PHP,
  and uses
  %code= CI.Versions.default_php
  as the default.
  Please
  = HAML.contact_us()
  if you need a different version; we'll be happy to install it for you.

%h2#composer-pear-pecl Dependencies&mdash;including composer, pear, and pecl

%p
  Circle has all three of these package managers installed.
  You don't need to specify anything in your <code>circle.yml</code> file
  if you are using <code>composer</code>.
  When Circle encounters a <code>composer.json</code> file in your code,
  we automatically install your <code>composer</code> dependencies.

%p
  To install your dependencies with either <code>pear</code> or <code>pecl</code>,
  you have to include pre-dependency commands in your <code>circle.yml</code> file.
  The following example shows how you would tell Circle to invoke <code>pecl</code>
  to include the <code>mongo</code> extension.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - pecl install mongo

%p
  It is simple to add a line or two to your <code>circle.yml</code> file telling us
  how to handle your project.
  Here's an example of a pre-dependency command telling Circle that your
  repo contains a custom configuration file.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - mv config/custom.ini ~/.phpenv/versions/$(phpenv global)/etc/conf.d/

%p
  Note: <code>phpenv global</code> returns the PHP version that has been
  specified in your <code>circle.yml</code> file.

%p
  Here's another example showing how you could adjust PHP settings in
  a <code>.ini</code> file.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - echo "memory_limit = 64M" > ~/.phpenv/versions/$(phpenv global)/etc/conf.d/memory.ini

%h2 Databases

%p
  We have pre-installed more than a dozen
  = succeed ',', ->
    %a{href: "/docs/environment#databases"} databases and queues
  including PostgreSQL and MySQL.
  If needed, you have the option of
  = succeed '.', ->
    %a{href: "/docs/manually#dependencies"} manually setting up your test database

%h2 Testing

%p
  Circle always runs your tests on a fresh machine.
  The <code>test</code> section of your <code>circle.yml</code> file is where
  you specify your customized testing needs, such as including your own
  testing script.

%pre
  %code.no-highlight<>
    :preserve
      test:
        override:
          - ./my_testing_script.sh

%h3#xdebug Enable Xdebug

%p
  Xdebug is installed for all versions of PHP, but is disabled by default.
  It is simple to reactivate this tool by adding the following to your
  <code>circle.yml</code> file:

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - sed -i 's/^;//' ~/.phpenv/versions/$(phpenv global)/etc/conf.d/xdebug.ini

%p
  This example uses <code>sed</code> to uncomment the lines in the pre-installed
  <code>xdebug.ini</code> file.

%h2 Deployment

%p
  Circle offers first-class support for
  = succeed '.', ->
    %a{href: "/docs/configuration#deployment"} deployment
  When a build is green, Circle will deploy your project as directed
  in your <code>circle.yml</code> file.
  We can deploy to PaaS providers as well as to
  physical servers under your control.

%h3 Troubleshooting for PHP

%p
  If you run into problems, check out our
  %a{href: "/docs/troubleshooting-php"}
    PHP troubleshooting
  write-ups about these issues:

= @include_article('troubleshooting_php')

%p
  If you are still having trouble, please
  = HAML.contact_us()
  and we will be happy to help.
