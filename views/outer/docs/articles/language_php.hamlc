- @title = 'Continuous Integration and Continuous Deployment with PHP'
- @short_title = 'PHP'
- @lastUpdated = "Jun 7, 2013"


%h2 Overview

%p
  CircleCI works seamlessly with all the tools and package managers that
  help PHP developers test and deploy their code.

%p
  CircleCI uses
  %a{href: "https://github.com/CHH/php-build"} php-build
  and
  %a{href: "https://github.com/CHH/phpenv"} phpenv
  to manage PHP versions.
  If you use CircleCI's default version of PHP,
  != succeed ',', ->
    %code= CI.Versions.default_php
  you and your tests are ready to roll.
  If you use a different version, no worries; CircleCI supports
  %a{href: "/docs/environment#php"} several versions of PHP
  so it is likely we have you covered.

%p
  You can specifying the PHP version to use as well as other important
  dependencies by creating a
  %a{href: "/docs/configuration"} circle.yml
  file.
  When you place this file in your git repo's root directory,
  CircleCI reads the file each time it runs a build.
  Your <code>circle.yml</code> file defines your PHP environment.

%h2#composer-pear-pecl composer, pear, and pecl

%p
  CircleCI has all three of these package managers installed.

%p
  You don't need to specify anything in your <code>circle.yml</code>
  file if you are using <code>composer</code>.
  When CircleCI encounters a <code>composer.json</code> file in your code,
  we automatically install your <code>composer</code> dependencies.

%p
  To install your dependencies with either <code>pear</code> or <code>pecl</code>,
  you have to include pre-dependency commands in your <code>circle.yml</code> file.
  The following example shows how you would tell CircleCI to invoke <code>pecl</code>
  to include the MongoDB extension.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - pecl install mongo

%h2#customizing-php-environ Customizing your PHP environment

%p
  Your <code>circle.yml</code> file is the way to handle customization.
  Let's say that you need to change your <code>config.ini</code> file,
  and you want to make sure that CircleCI knows your tests use <code>php 5.4.6</code>.
  Here is an example that states the version number and
  includes a pre-dependency command telling CircleCI your repo contains
  a file named <code>config/custom.ini</code>.

%pre
  %code.no-highlight<>
    :preserve
      machine:
        php:
          version: 5.4.6

      dependencies:
        pre:
          - mv config/custom.ini ~/.phpenv/versions/$(phpenv global)/etc/conf.d/

%p
  Note: <code>phpenv global</code> returns the PHP version that has been
  specified in your <code>circle.yml</code> file.

%h2#add-lines Add a few lines

%p
  If you want to create a configuration file with only a few simple settings,
  you can incorporate them in your <code>circle.yml</code> file using <code>echo</code>.
  For example, if you want to include a setting that restricts memory use to 64 megabytes,
  here's how you would modify your <code>circle.yml</code> file:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        php:
          version: 5.4.6

      dependencies:
        pre:
          - echo "memory_limit = 64M" > ~/.phpenv/versions/$(phpenv global)/etc/conf.d/memory.ini

%h2#xdebug Enable Xdebug

%p
  Xdebug is installed for all versions of PHP, but is disabled by default&mdash;CircleCI
  disables it because the debugger's tracking slows down execution.
  It is simple to reactivate the tool's debugging and profiling capabilities.
  As you might expect,
  you enable Xdebug by adding the following to your <code>circle.yml</code> file:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        php:
          version: 5.4.6

      dependencies:
        pre:
          - sed -i 's/^;//' ~/.phpenv/versions/$(phpenv global)/etc/conf.d/xdebug.ini

%p
  This example uses <code>sed</code> to uncomment the lines in the pre-installed <code>xdebug.ini</code> file.

%h2#php-apache Using the Apache Webserver
%p
  Apache2 is already installed on CircleCI containers but it needs to be
  configured to host your PHP application.

%p
  To enable your site check a file containing your site configuration into your
  repository and copy it to <code>/etc/apache2/sites-available/</code> during
  your build.
  Then enable the site with <code>a2ensite</code> and restart Apache.

%p
  An example configuration that sets up Apache to serve the PHP site from
  <code>/home/ubuntu/MY-PROJECT/server-root</code> is:

%pre
  %code.no-highlight<>
    :preserve
      Listen 8080

      &lt;VirtualHost *:8080&gt;
        LoadModule php5_module /home/ubuntu/.phpenv/versions/PHP_VERSION/libexec/libphp5.so

        DocumentRoot /home/ubuntu/MY-PROJECT/server-root
        ServerName host.example.com
        &lt;FilesMatch \\.php$&gt;
          SetHandler application/x-httpd-php
        &lt;/FilesMatch&gt;
      &lt;/VirtualHost&gt;
%p
  Replace <code>MY-SITE</code> in with the name of your site configuration
  file and <code>PHP_VERSION</code> with the version of PHP you configured
  in your <code>circle.yml</code>.

%p
  Then enable your site and restart Apache by adding the following to your <code>circle.yml</code>

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        post:
          - cp ~/MY-PROJECT/MY-SITE /etc/apache2/sites-available
          - a2ensite MY-SITE
          - sudo service apache2 restart
