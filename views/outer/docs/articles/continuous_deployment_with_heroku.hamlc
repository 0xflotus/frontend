- @parents = ["reference"]
- @title = 'Continuous Deployment with Heroku'
- @lastUpdated = "May 7, 2013"

= HAML['heading']({title: "Heroku setup", hash: "heroku-setup"})

%p
  You must supply or confirm some authentication settings before Heroku deployment.
  Circle dividies this setup work into three steps.

%p
  <b>Note</b>: Heroku authenticates using the API key set in your Heroku dashboard <b>Account</b> page;
    this API key must be set before proceeding.

%p
  Step 1: Enter the API key (if not autofilled) and click <b>Save</b>.

%img{src: assetPath("/img/docs/heroku-step1.png")}

%p
  If this key has already been added to your <b>Edit settings > Heroku settings</b> page,
  Circle maintains security by displaying a shorten version of the existing API key
  and masking the key when autofilling the <b>Set key</b> field.

%p
  <b>Note</b>: Heroku's architecture and security model require that you deploy as a particular user.
  A member of your project&mdash;possibly you&mdash;needs to register as that user as the second step in this process.

%img{src: assetPath("/img/docs/heroku-step2.png")}

%p
  Step 2: Click the button to set the registered person as the Heroku deploy user
  and to associate a Heroku SSH key with the deploy user's account.
%p
  Step 3: Specify the app using the
  %code appname
  key.

%pre
  %code.no-highlight<>
    :preserve
      deployment:
        staging:
          branch: master
          heroku:
            appname: foo-bar-123
%p
  You can now use the
  %code git push
  command.
  Upon a successful build, we'll automatically deploy to the app in the section that matches the push, should there be one.

= HAML['heading']({title: "Heroku with pre- or post-deployment steps", hash: "heroku-deployment-steps"})

%p
  If you'd like to run commands before or after deploying to Heroku, you'll have to use the 'normal'
  %code deployment
  syntax.

%pre
  %code.no-highlight<>
    :preserve
      deployment:
        production:
          branch: production
          commands:
            - git push git@heroku.com:foo-bar-123.git $CIRCLE_SHA1:master
            - heroku run rake db:migrate --app foo-bar-123
%p

= HAML['heading']({title: "Heroku's maintenance mode", hash: "heroku-maintenance-mode"})

%p
  When you are pushing new code that requires a database migration, your app will not be available.
  To be  polite, you might want to treat your users to more than an enigmatic error page.

%p
  Heroku's offers a built-in maintenance mode when you need to disable an app for some period of time.
  This mode blocks all HTTP requests and displays a generic HTML page telling users that service is unavailable because of maintenance (more about customizing this 503 error message page below).

%p
  You enable maintenance mode with the
  %code heroku maintenance:on
  command.
  Once your work is completed, you turn the mode off with the
  %code heroku maintenance:off
  command.

%p
%p
  Enabling and disabling maintenance mode is sufficient for most simple updating work such as adding a new graphic or making wording changes,
  however, when you are performing a database migration Heroku suggests that you use the
  %code heroku scale
  command to reduce the number of active Heroku's worker dynos.
  To ensure that no background jobs are processed during migration, scale down all the workers.
  Here is how to tweak the
  %code deployment
  section of your
  %code circle.yml
  file to employ these commands.


%pre
  %code.no-highlight<>
    :preserve
      deployment:
        commands:
          - heroku maintenance:on --app foo-bar-123
          - heroku scale worker=0 --app foo-bar-123
          - git push git@heroku.com:foo-bar-123.git $CIRCLE_SHA1:master
          - heroku run rake db:migrate --app foo-bar-123
          - heroku scale worker=x --app foo-bar-123
          - heroku maintenance:off --app foo-bar-123
%p


%h3 Custom maintenance page

%p
  As previously mentioned, Heroku displays a default "Application Offline for Maintenance" HTML page telling users that an application is currently unavailable and to check back later.
  Should you wish, you can create a
  %a{href: "http://devcenter.heroku.com/articles/error-pages#customize-pages"} custom
  service unavailable page for your app.

= HAML['heading']({title: "Heroku and database migrations", hash: "heroku-database-migrations"})

%p
  After pushing new code, you may wish to run your database migration.
  <b>Migration times will vary between apps because of data size and structure.</b>

%p
  The Rails
  %code rake db:migrate
  command invokes several tasks including
  <code> db:schema:dump</code>, which updates the db/schema.rb file to match the database structure.
  Circle supports such command-driven database migrations as well as database migrations performed manually.

%p
  Before migrating, Heroku recommends that you use the
  %code heroku pgbackups
  command to
  %a{href: "http://devcenter.heroku.com/articles/migrate-heroku-postgres-with-pgbackups#capture-source-snapshot"} capture a snapshot
  so that you can easily revert the database back to its previous state.

%h3 Migration guides

%p
  Here are migration-related articles that you might find useful.

%ul
  %li
    %a{href: "http://guides.rubyonrails.org/migrations.html"} Rails
  %li
    %a{href: "http://github.com/nearinfinity/node-db-migrate#readme"}node.js
  %li
    %a{href: "http://djangopro.com/2011/01/django-database-migration-tool-south-explained"}Django (Python web framework)


= HAML['heading']({title: "Clearing caches after a deployment", hash: "heroku-clearing-caches-after-deployment"})

%p
  If you are using a caching add-on,
  it is likely that you want to clear your caches after a deploy to avoid using out-of-date and possibly corrupt documents and/or data.
  Heroku does not clear caching by default, but you can install an
  %a{href: "http://addons.heroku.com/#caching"}add-on
  that assists with cache management.

%p
  Add-ons include settings, such as expiration time settings for clearing cache pages,
  as well as commands that can assist with such housekeeping.
  MemCachier supports a
  %code Flush
  command that clears your entire cache.
  You might want to write a standalone script that uses the memcache client to call
  %code Flush
  and run the script at deployment.

%h3 Related articles

%p
  Here are related articles that you might find useful.

%ul
  %li
    %a{href: "http://devcenter.heroku.com/articles/memcachier#getting-started"} Memcachier documentation
  %li
    %a{href: "http://redis.io/documentation"} Redis documentation
  %li
    %a{href: "http://docs.djangoproject.com/en/1.5/topics/cache"} Django's cache framework documentation
