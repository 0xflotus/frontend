- @title = "The Ruby debugger gem won't build"
- @lastUpdated = "Dec 20, 2013"

%p
  The Ruby debugger gem needs to build native extensions and uses the
  %a{href: "https://github.com/cldwalker/debugger-ruby_core_source"} debugger-ruby_core_source gem
  to provide the Ruby headers that it needs to compile these extensions.

%p
  Unfortunately debugger-ruby_core_source doesn't include headers for every
  version of Ruby so the debugger gem can only be used with a
  %a{href: "https://github.com/cldwalker/debugger-ruby_core_source/tree/master/lib/debugger/ruby_core_source"} subset of Ruby versions
  \.

%p
  You can recognise when debugger doesn't support your version of Ruby if you see a line similar to
  %code No source for ruby-1.9.2-p320 provided with debugger-ruby_core_source gem.
  in your <code>bundle install</code> output.

%h2 Interaction with the CircleCI cache

%p
  Sometimes people will update their version of Ruby to a version that doesn't
  work with debugger, and not experience any problems because the compiled
  native extensions are still in their CircleCI cache.
  
%p
  Then the old cache will go away (happens periodically, or through manual
  intervention), and suddenly the build doesn't work anymore.

%h2 Solutions

%p
  There are two ways to get builds working again, switch to a version of Ruby
  that's supported by debugger or stop using the debugger gem.

%p
  For the adventurous amongst you you could try putting debugger into a special
  group in your Gemfile and then excluding that group in your <code>bundle
  install</code> command.

%p
  E.g.:

  In your Gemfile:
%pre
  %code.no-highlight<>
    :preserve
      gem "debugger, :groups => [:debugging]

%p
  And in your <code>circle.yml</code>
%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        override:
          - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --without debugging --clean

%p
  The downside is that using <code>dependencies: override:</code> section of
  <code>circle.yml</code> disables inference.
