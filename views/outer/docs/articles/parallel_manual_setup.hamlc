- @parents = ['parallelism']
- @title = "Manually Setting Up Parallelism"
- @icon = "icon-cogs"
- @lastUpdated = "Feb 2, 2013"
- @subtitle = "Partition your tests across N boxes"

%p
  If you want the benefits of parallel testing, and you're not
  using one of our automatically supported test runners, or if
  you've overridden our test commands, you'll still be able to set up parallelism and reduce your test run-times.

%h2 Spliting your test suite
%p
  When you use Circle's parallelization, we run your code on multiple separate VMs.
  To use parallelism, you make your test runner run only a subset of tests on each VM.
  We use environmental variables to denote the number of VMs and to identify each one, and you can access these from your test runner:

%dl
  %dt
    %code CIRCLE_NODE_TOTAL
  %dd
    is the total number of parallel VMs being used to run your tests on each push.

  %dt
    %code CIRCLE_NODE_INDEX
  %dd
    is the index of the particular VM.
    %code CIRCLE_NODE_INDEX
    is indexed from zero.



%h2 A simple example

%p
  If you want to run the two commands
  %code rake spec
  and
  %code npm test
  in parallel, you can use a bash case statement:
%pre
  %code<>
    :preserve<>
      test:
        override:
          - case $CIRCLE_NODE_INDEX in 0) rake spec ;; 1) npm test ;; esac

%p
  Obviously, this is slightly limited because it's hard-coded to
  only work with two nodes, and the test time might not balance
  across all nodes equally.

%h2 Balancing

%p
  A more powerful version evenly splits all test files across N nodes. We recommend you write a script that does something like:
%pre
  %code<>
    :preserve<>
      #!/bin/bash

      i=0
      files=()
      for file in $(find ./test -name "*.py")
      do
        if [ $(($i % $CIRCLE_NODE_TOTAL)) -eq $CIRCLE_NODE_INDEX ]
        then
          files+=" $file"
        fi
        ((i++))
      done

      test-runner ${files[@]}

%p
  This script partitions the test files into N equally sized buckets, and calls "test-runner" on the bucket for this machine.

%h2 Contact Us
%p

  If you set this up for a library or framework that we should be
  able to infer automatically, please
  = HAML.contact_us({succeed: "."})
  We are always interested in adding support for more languages and frameworks.
