- @title = 'Continuous Integration and Continuous Deployment with Python'
- @short_title = 'Python'
- @lastUpdated = "Jun 19, 2013"

%h2 Overview

%p

  CircleCI has great support for Python.
  We can infer a substantial amount of your settings and required
  dependencies from your code.
  When we don't, just create a
  %a{href: "/docs/configuration"} circle.yml
  file and place this
  file in your git repo's root directory.
  CircleCI then reads your <code>circle.yml</code> file each time we run a build.

%h2 Version

%p
  When Circle detects Python, we automatically initiate <code>virtualenv</code>
  to create an isolated Python environment using
  = succeed '.', ->
    %code= CI.Versions.default_python

%p
  We support
  = succeed ',', ->
    %a{href: "/docs/environment#python"} many version of Python
  so specify your project's required version in your
  <code>circle.yml</code> file if it differs from Circle's default version.
  Please
  = HAML.contact_us()
  if other versions of Python would be of use to you.

%h2#package-mgrs-dependencies Package managers and dependencies

%p
  Circle automatically installs your dependencies using either <code>pip</code>
  or <code>distutils</code> when we find a <code>requirements.txt</code>
  or a <code>setup.py</code> file.

%p
  Alternatively, you can install each package individually,
  although this is seldom necessary.
  In such rare cases, you specify each dependency you need in
  the <code>circle.yml</code> file.
  Here's an example of how you would do that using <code>pip</code>.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        post:
          - pip install a-python-package
%p
%h2 Databases

%p
  Circle manages all your database requirements,
  such as creating your database and installing your schema.
  We have pre-installed more than a dozen
  = succeed ',', ->
    %a{href: "/docs/environment#databases"} databases and queues
  including PostgreSQL and MySQL.
  If needed, you have the option of
  = succeed '.', ->
    %a{href: "/docs/manually#dependencies"} manually setting up your test database

%h2 Testing

%p
  CircleCI automatically runs <code>tox</code> when we find a <code>tox.ini</code> file,
  and runs <code>nosetests</code> when we find a <code>unittest.py</code> file.
  CircleCI runs <code>manage.py test</code> if you are using Django.
  If none of those work for your project,
  you can override CircleCI's testing by including your own testing script.

%pre
  %code.no-highlight<>
    :preserve
      test:
        override:
          - ./my_testing_script.sh

%h2 Deployment

%p
  CircleCI has first-class support for
  %a{href: "/docs/configuration#deployment"} deployment
  with Fabric or Paver.
  Include information in your <code>circle.yml</code> file to let
  CircleCI know that your Python project uses one of these tools.
  Here's an example of how to do that.

%pre
  %code.no-highlight<>
    :preserve
      deployment:
        production:
          branch: master
          commands:
            - fab deploy
%p
%h3 Troubleshooting for Python

%p
  Problems?
  Check out our
  %a{href: "/docs/troubleshooting-python"}
    Python troubleshooting
  information:

= @include_article('troubleshooting_python')

%p
  If you are still having trouble, please
  = HAML.contact_us()
  and we will be happy to help.
