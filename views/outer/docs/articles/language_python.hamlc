- @title = 'Continuous Integration and Continuous Deployment with Python'
- @short_title = 'Python'
- @lastUpdated = "Jun 19, 2013"

%h2 Overview

%p
  Circle has great support for Python.
  We can infer a substantial amount of your settings and required dependencies
  from your code.
  This enables Circle to configure the VM to your preferences and requirements,
  set up your dependencies, recognize what database (if any) your tests use,
  run your tests, and, if directed, deploy your green build.

%p
  If your project has any special requirements, tell us about them by including a
  %a{href: "/docs/configuration"} circle.yml
  file in your repo.

%h2 Version

%p
  When Circle detects Python, we automatically initiate <code>virtualenv</code>
  to create an isolated Python environment using
  = succeed '.', ->
    %code= CI.Versions.default_python
  Please
  = HAML.contact_us({succeed: ""})
  if other versions of Python would be of use to you.


%h2#package-mgrs-dependencies Package managers and dependencies

%p
  Circle automatically installs your dependencies using either <code>pip</code>
  or <code>distutils</code> when we find a <code>requirements.txt</code>
  or a <code>setup.py</code> file.

%p
  Alternatively, you can install each package individually,
  although this is seldom necessary.
  In such rare cases, you specify each dependency you need in
  the <code>circle.yml</code> file.
  Here's an example of how you would do that using <code>pip</code>.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        post:
          - pip install a-python-package
%p
%h2 Databases

%p
  Circle routinely manages all your database requirements,
  such as creating your database and installing your schema.
  We have pre-installed more than a dozen
  = succeed ',', ->
    %a{href: "/docs/environment#databases"} databases and queues
  including PostgreSQL and MySQL.
  If needed, you have the option of
  = succeed '.', ->
    %a{href: "/docs/manually#dependencies"} manually setting up your test database

%h2 Testing

%p
  Circle automatically runs <code>manage.py test</code> if you are using Django.
  We also automatically run <code>nosetests</code> and <code>tox</code>.
  If none of those work for your project,
  you can override Circle's testing by including your own testing script.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        override:
          - ./my_testing_script.sh

%h2 Deployment

%p
  Circle has first-class support for
  %a{href: "/docs/configuration#deployment"} deployment
  with Fabric or Paver.
  Include information in your <code>circle.yml</code> file to let
  Circle know that your Python project uses one of these tools.
  Here's an example of how to do that.

%pre
  %code.no-highlight<>
    :preserve
      deployment:
        production:
          branch: master
          commands:
            - fab deploy
%p
%h3 Troubleshooting for Python

%p
  Our
  %a{href: "/docs/troubleshooting-python"}
    Python troubleshooting
  documentation has information about the following issues and problems:

=HAML["troubleshooting_python"](@)

%p
  If you are still having trouble, please
  = HAML.contact_us({succeed: ""})
  and we will be happy to help.


