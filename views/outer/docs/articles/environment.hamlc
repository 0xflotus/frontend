- @title = 'Test environment'
- @lastUpdated = "Jul 23, 2013"
- @v = CI.Versions

%p
  Occasionally, bugs in tests arise because Circle's environment differs slightly from your local environment.
  In the future, we plan to allow as much of this to be configurable as possible.
  Please
  = HAML['contact_us']()
  if some part of our environment is not suitable for you, and we will try to come up with a workaround.

%p
  If any version is not listed here, SSH into our build boxes to check it manually (and
  = HAML['contact_us']()
  so we can update this doc.


%h2#base Base

%p
  Our base image uses Ubuntu 12.04, with the addition of many packages
  commonly used in web development.
  Some specifics:

%ul
  %li
    %code Architecture: x86_64
  %li
    %code Username: ubuntu
  %li
    %code Ubuntu 12.04 (precise)
  %li
    %code Kernel version: 3.2
  %li
    %code= @v.v('git')
  %li
    %code= @v.v('gcc')
  %li
    %code= @v.v('g++')
  %li
    %code GNU make 3.81


%h2#env-vars Environmental Variables

%p
  See
  %a{ href: "/docs/environment-variables" } this doc
  for a thorough list of all available environment variables. Here are some of the most
  useful ones:

  %dl
    %dt
      %code CIRCLECI=true
    %dt
      %code CI=true
    %dt
      %code DISPLAY=:99
    %dt
      %code CIRCLE_BRANCH
    %dd
      The name of the branch being tested, such as 'master'
    %dt
      %code CIRCLE_SHA1
    %dd
      The SHA1 of the commit being tested
    %dt
      %code CIRCLE_BUILD_NUM
    %dd
      The build number, same as in circleci.com/gh/foo/bar/123

%p
  You can use the
  %code CI
  and
  %code CIRCLECI
  environment variables in your program, if you need to have CI-specific behavior in you application.
  Naturally, this is not recommended in principle, but it can occasionally be useful in practice.

%h2#browsers Browsers and GUIs


%p
  Circle runs graphical programs in a virtual framebuffer, using
  = succeed '.', ->
    xvfb
  This means programs like Selenium, Capybara, Jasmine, and other testing tools which require a browser will work perfectly.
  You do not need to anything to set this up.
  We have
  <code>phantomjs 1.9.0</code>,
  %code= @v.v('casperjs')
  and
  %code libwebkit (2.2.1-1ubuntu4)
  pre-installed,
  for Capybara and other headless browser interfaces.


%p
  Xvfb runs on port 99, and the appropriate
  %code DISPLAY
  environment variable has already been set.

%p
  Selenium-based tests are able to use Chrome stable channel (Chrome 28.0 with Chromedriver 23.0 as of August, 2013), and Firefox 23.

%p
  %span.label.label-info Help
  %a{href: '/docs/troubleshooting-browsers'}Check out our browser debugging docs.


%h2 Languages

%h3 Ruby

%p We use RVM to give you access to a wide variety of Ruby
  versions. In general, we try to have most commonly used versions
  installed. If there's a recently released version of ruby that's not
  on this list, it's likely we already have it installed or we can
  quickly install it for you.

%p
  You can
  %a{ href: "/docs/configuration#ruby-version" }
  choose the exact version you need directly, from the following list:
  %ul
    - for r in @v.rubies
      %li
        %code= r

%p
  By default we use
  %code<
    Ruby
    = @v.default_ruby
  unless we detect that you need Ruby 1.8.7, in which case we'll use
  = succeed '.', ->
    %code= @v.old_ruby
  This is installed via
  RVM (stable).

%p
  We also have a number of Ruby commands pre-installed if you need to use them directly. They use Ruby
  = succeed '.', ->
    %code= @v.default_ruby

%ul
  %li
    %code= @v.v('bundler')
  %li
    %code= @v.v('cucumber')
  %li
    %code= @v.v('rspec')
  %li
    %code= @v.v('rake')


%h3#nodejs node.js
%p
  We use NVM to provide access to a wide range of node versions.
  We currently have a small set of Node versions installed, but any version of Node that you specify in your
  %code circle.yml
  will install instantly, so it's easy to use any Node version.

%p
  Currently we have

%ul
  - for n in @v.nodes
    %li
      %code= n

%p
  If you do not specify a version, we use
  = succeed '.', ->
    %code= @v.default_node


%h3  Clojure
%p
  We use
  %code= @v.v('lein')
  by default, and you can also use
  = succeed ",", ->
    %code lein16
  which is version
  = succeed ".", ->
    = @v.lein_old

%p
  You should specify your Clojure version in your
  %code project.clj
  file.



%h3 Python
%p
  We use
  = succeed ",", ->
    %code= @v.v('python')
  by default, although you can
  = succeed '.', ->
    %a{href: "/docs/configuration#python-version"} control the version in your circle.yml file
  Packages can be installed using
  %code= @v.v('pip')
  and
  = succeed ".", ->
    %code= @v.v('virtualenv')

%p
  Supported versions are:
  - python_versions = ["2.5", "2.5.1", "2.5.2", "2.5.3", "2.5.4", "2.5.5", "2.5.6", "2.6.6", "2.6.7", "2.6.8", "2.6-dev", "2.7", "2.7.1", "2.7.2", "2.7.3", "2.7.4", "2.7.5", "2.7-dev", "3.0.1", "3.1.3", "3.1.4", "3.1.5", "3.1-dev", "3.2", "3.2.1", "3.2.2", "3.2.3", "3.2.4", "3.2.5", "3.2-dev", "3.3.0", "3.3.1", "3.3.2", "3.3-dev", "3.4-dev", "jython-2.5.0", "jython-2.5.1", "jython-2.5.2", "jython-2.5.3", "jython-2.5.4-rc1", "jython-2.7-beta1", "pypy-1.8", "pypy-1.9", "pypy-2.0", "stackless-2.7.2", "stackless-3.2.2"]

  .row
    - cols = 4
    - per_col = (Math.ceil(python_versions.length / 4.0))
    - for i in [0..cols]
      .span2
        %ul
          - for v in python_versions[(i*per_col)...((i+1)*per_col)]
            %li
              %code
                = v

%p
  Please
  = HAML['contact_us']()
  if other versions of Python would be useful to you.




%h3 PHP
%p
  We use
  = succeed ",", ->
    %code= @v.v('php')
  by default, although you can
  = succeed '.', ->
    %a{href: "/docs/configuration#php-version"} control the version in your circle.yml file
  Packages can be installed using
  <code>composer</code>, <code>pear</code>, and <code>pecl</code>.

%p
  Supported versions are:
  - php_versions = @v.phps
  .row
    - cols = 4
    - per_col = (Math.ceil(php_versions.length / 4.0))
    - for i in [0..cols]
      .span2
        %ul
          - for v in php_versions[(i*per_col)...((i+1)*per_col)]
            %li
              %code
                = v

%p
  Are you using a version of PHP that isn't included in this list?
  If so, please
  = HAML['contact_us']({succeed: '.'})


%h3#java Java (and JVM based languages)

%p
  Circle has the following languages and tools installed:

%ul
  %li
    <code>oracle JDK 7, using Java 1.7.0_21</code> (default)
  %li
    %code oracle JDK 6, using Java 1.6.0u37
  %li
    %code openjdk7
  %li
    %code openjdk6
  %li
    %code= @v.v('ant')
  %li
    %code= @v.v('maven')

%p
  You can specify the following Java versions in your <code>circle.yml</code> file:
    %ul
      %li
        <code>oraclejdk7</code> (default)
      %li
        %code oraclejdk6
      %li
        %code openjdk7
      %li
        %code openjdk6

%p
  Other JVM-based languages should also work.
  Circle has
  = succeed ",", ->
    %a{href: "#clojure"} special support for Clojure
  please
  = HAML['contact_us']()
  let us know if you need anything else installed to run your JVM language of choice.



%h3#other Other languages
%p
  We currently have a number of packages installed to help you test your backend applications, including:
%ul
  %li
    %code= @v.v('gcc')
  %li
    %code= @v.v('g++')
  %li
    %code= @v.v('golang')
  %li
    %code= @v.v('erlang')

%h2#databases Databases and Services

%p
  We have the following services automatically set up for your tests:

%ul
  %li
    %code= @v.v('postgresql')
    (including postgis 2.0 extensions)

  %li
    %code= @v.v('mysql')
  %li
    %code= @v.v('mongodb')
  %li
    %code= @v.v('riak')
  %li
    %code= @v.v('cassandra')
  %li
    %code= @v.v('redis')
  %li
    %code= @v.v('memcache')
  %li
    %code= @v.v('sphinx')
  %li
    %code= @v.v('elasticsearch')
  %li
    %code= @v.v('solr')
  %li
    %code= @v.v('beanstalkd')
  %li
    %code= @v.v('couchbase')
  %li
    %code= @v.v('couchdb')
  %li
    %code= @v.v('neo4j')
  %li
    %code= @v.v('rabbitmq')

%p
  Both
  %code postgres
  and
  %code mysql
  are set up to use the
  %code ubuntu
  user, have a database called
  %code circle_test
  available, and don't require any password.
  The other databases should not need any specific username or password, and should just work.

%p
  Several services are disabled by default because they're not
  commonly used, or because of memory requirements. We try to
  detect and enable them automatically, but in case
  we fail (or don't have inference in your language), you can
  enable them by adding to your circle.yml:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        services:
          \- cassandra

%p The list of services that can be enabled this way is

%ul
  %li
    %code cassandra
  %li
    %code elasticsearch
  %li
    %code rabbitmq-server
  %li
    %code riak
  %li
    %code beanstalkd
  %li
    %code couchbase-server
  %li
    %code neo4j
