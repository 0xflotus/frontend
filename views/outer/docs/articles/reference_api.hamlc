:coffeescript
  # TODO: Make these annotations on defapi
  api_data =
    'me':
      description: "Provides information about the signed in user."
      method: "GET"
      response: """
        {
          "basic_email_prefs" : "smart", // can be "smart", "none" or "all"
          "login" : "pbiggar" // your github username
        }
        """
    'projects':
      description: "List of all the repos you have access to on Github, with build information organized by branch."
      method: "GET"
      response: """
        [ {
          "vcs_url": "https://github.com/circleci/mongofinil"
          "followed": true // true if you follow this project in Circle
          "branches" : {
            "master" : {
              "pusher_logins" : [ "pbiggar", "arohner" ], // users who have pushed
              "last_non_success" : { // last failed build on this branch
                "pushed_at" : "2013-02-12T21:33:14Z",
                "vcs_revision" : "1d231626ba1d2838e599c5c598d28e2306ad4e48",
                "build_num" : 22,
                "outcome" : "failed",
                },
              "last_success" : { // last successful build on this branch
                "pushed_at" : "2012-08-09T03:59:53Z",
                "vcs_revision" : "384211bbe72b2a22997116a78788117b3922d570",
                "build_num" : 15,
                "outcome" : "success",
                },
              "recent_builds" : [ { // last 5 builds, ordered by pushed_at (decreasing)
                "pushed_at" : "2013-02-12T21:33:14Z",
                "vcs_revision" : "1d231626ba1d2838e599c5c598d28e2306ad4e48",
                "build_num" : 22,
                "outcome" : "failed",
                }, {
                "pushed_at" : "2013-02-11T03:09:54Z",
                "vcs_revision" : "0553ba86b35a97e22ead78b0d568f6a7c79b838d",
                "build_num" : 21,
                "outcome" : "failed",
                }, ... ],
              "running_builds" : [ ] // currently running builds
            }
          }
        }, ... ]
             """
    'project/:username/:project':
      description: "Build summary for each of the last 30 builds for a single git repo."
      method: "GET"
      response: """
      [ {
        "vcs_url" : "https://github.com/circleci/mongofinil",
        "build_url" : "https://circleci.com/gh/circleci/mongofinil/22",
        "build_num" : 22,
        "branch" : "master",
        "vcs_revision" : "1d231626ba1d2838e599c5c598d28e2306ad4e48",
        "committer_name" : "Allen Rohner",
        "committer_email" : "arohner@gmail.com",
        "subject" : "Don't explode when the system clock shifts backwards",
        "body" : "", // commit message body
        "why" : "github", // short string explaining the reason we built
        "dont_build" : null, // reason why we didn't build, if we didn't build
        "queued_at" : "2013-02-12T21:33:30Z" // time build was queued
        "start_time" : "2013-02-12T21:33:38Z", // time build started running
        "stop_time" : "2013-02-12T21:34:01Z", // time build finished running
        "build_time_millis" : 23505,
        "lifecycle" : "finished",
        "outcome" : "failed",
        "status" : "failed",
        "retry_of" : null, // build_num of the build this is a retry of
        "previous" : { // previous build
          "status" : "failed",
          "build_num" : 21
        }, ... ]
        """
    'recent-builds':
      description: "Build summary for each of the last 30 recent builds, ordered by build_num."
      method: "GET"
      response: """
      [ {
        "vcs_url" : "https://github.com/circleci/mongofinil",
        "build_url" : "https://circleci.com/gh/circleci/mongofinil/22",
        "build_num" : 22,
        "branch" : "master",
        "vcs_revision" : "1d231626ba1d2838e599c5c598d28e2306ad4e48",
        "committer_name" : "Allen Rohner",
        "committer_email" : "arohner@gmail.com",
        "subject" : "Don't explode when the system clock shifts backwards",
        "body" : "", // commit message body
        "why" : "github", // short string explaining the reason we built
        "dont_build" : null, // reason why we didn't build, if we didn't build
        "queued_at" : "2013-02-12T21:33:30Z" // time build was queued
        "start_time" : "2013-02-12T21:33:38Z", // time build started
        "stop_time" : "2013-02-12T21:34:01Z", // time build finished
        "build_time_millis" : 23505,
        "lifecycle" : "finished",
        "outcome" : "failed",
        "status" : "failed",
        "retry_of" : null, // build_num of the build this is a retry of
        "previous" : { // previous build
          "status" : "failed",
          "build_num" : 21
        }, ... ]
        """
    'project/:username/:project/:build_num':
      description: "Full details for a single build, including the output for all actions. The response includes all of the fields from the build summary."
      method: "GET"
      response: """
        {
          "vcs_url" : "https://github.com/circleci/mongofinil",
          "build_url" : "https://circleci.com/gh/circleci/mongofinil/22",
          "build_num" : 22,
          "steps" : [ {
            "name" : "configure the build",
            "actions" : [ {
              "bash_command" : null,
              "run_time_millis" : 1646,
              "start_time" : "2013-02-12T21:33:38Z",
              "end_time" : "2013-02-12T21:33:39Z",
              "name" : "configure the build",
              "command" : "configure the build",
              "exit_code" : null,
              "out" : [ ],
              "type" : "infrastructure",
              "index" : 0,
              "status" : "success",
            } ] },

            "name" : "lein2 deps",
            "actions" : [ {
              "bash_command" : "lein2 deps",
              "run_time_millis" : 7555,
              "start_time" : "2013-02-12T21:33:47Z",
              "command" : "((lein2 :deps))",
              "messages" : [ ],
              "step" : 1,
              "exit_code" : 0,
              "out" : [ {
                "type" : "out",
                "time" : "2013-02-12T21:33:54Z",
                "message" : "Retrieving org/clojure ... from clojars\\r\\n"
              } ],
              "end_time" : "2013-02-12T21:33:54Z",
              "index" : 0,
              "status" : "success",
              "type" : "dependencies",
              "source" : "inference",
              "failed" : null
            } ] },
            "name" : "lein2 trampoline midje",
            "actions" : [ {
              "bash_command" : "lein2 trampoline midje",
              "run_time_millis" : 2310,
              "continue" : null,
              "parallel" : true,
              "start_time" : "2013-02-12T21:33:59Z",
              "name" : "lein2 trampoline midje",
              "command" : "((lein2 :trampoline :midje))",
              "messages" : [ ],
              "step" : 6,
              "exit_code" : 1,
              "out" : [ {
                "type" : "out",
                "time" : "2013-02-12T21:34:01Z",
                "message" : "'midje' is not a task. See 'lein help'.\\r\\n\\r\\nDid you mean this?\\r\\n         do\\r\\n"
              }, {
                "type" : "err",
                "time" : "2013-02-12T21:34:01Z",
                "message" : "((lein2 :trampoline :midje)) returned exit code 1"
              } ],
              "end_time" : "2013-02-12T21:34:01Z",
              "index" : 0,
              "status" : "failed",
              "timedout" : null,
              "infrastructure_fail" : null,
              "type" : "test",
              "source" : "inference",
              "failed" : true
            } ]
          } ],
        }
        """
    'project/:username/:project/:build_num/retry':
      description: "Retries the build, returns a summary of the new build."
      method: "POST"
      response: """
      {
        "vcs_url" : "https://github.com/circleci/mongofinil",
        "build_url" : "https://circleci.com/gh/circleci/mongofinil/23",
        "build_num" : 23,
        "branch" : "master",
        "vcs_revision" : "1d231626ba1d2838e599c5c598d28e2306ad4e48",
        "committer_name" : "Allen Rohner",
        "committer_email" : "arohner@gmail.com",
        "subject" : "Don't explode when the system clock shifts backwards",
        "body" : "", // commit message body
        "why" : "retry", // short string explaining the reason we built
        "dont_build" : null, // reason why we didn't build, if we didn't build
        "queued_at" : "2013-04-12T21:33:30Z" // time build was queued
        "start_time" : "2013-04-12T21:33:38Z", // time build started running
        "stop_time" : "2013-04-12T21:34:01Z", // time build finished running
        "build_time_millis" : 23505,
        "lifecycle" : "queued",
        "outcome" : null,
        "status" : "queued",
        "retry_of" : 22, // build_num of the build this is a retry of
        "previous" : { // previous build
          "status" : "failed",
          "build_num" : 22
        }
        """
    'project/:username/:project/build-cache':
      description: "Clears the cache for a project"
      method: "DELETE"
      response: """
        {
          "status" : "build caches deleted"
        }
        """
    "api/v1/user/ssh-key":
      description: "Adds a Circle key to you Github User account."
      method: "POST"
    "api/v1/user/heroku-key":
      method: "POST"
      description: "Adds your Heroku API key to Circle, takes apikey as form param name."

-# (def api1-project-settings "/api/v1/project/:username/:project/settings")
-# (def api1-save-preferences "/api/v1/user/save-preferences")
-# (def api1-project-follow "/api/v1/project/:username/:project/follow")
-# (def api1-project-unfollow "/api/v1/project/:username/:project/unfollow")
-# (def api1-project-heroku-deploy-user "/api/v1/project/:username/:project/heroku-deploy-user")
-# (def api1-project-github-user "/api/v1/project/:username/:project/github-user")


%article
  - # @article_tags = [ "reference" ]

  = HAML['article_title']({icon: "icon-lock", title: 'The Circle REST API', lastUpdated: "Aug 23, 2012", subtitle: "Embrace and Extend"})

  .doc
    = HAML['heading']({title: "The Circle API", hash: "intro"})
    %p
      The Circle API is a RESTy, fully-featured API that allows you to do almost anything in Circle.
      You can access all information and trigger all actions.
      The only thing we don't provide access to is billing functions, which must be done from the Circle web UI.

    = HAML['heading']({title: "Getting started", hash: "getting-started"})
    %ol
      %li
        Add an API token from your
        = succeed '.', ->
          %a{ href: "https://circleci.com/account/api"} account dashboard

      %li
        To test it,
        %a{href: "https://circleci.com/api/v1/me"} view it in your browser
        or call the API using <code>curl</code>:
        %pre
          %code.bash<>
            :preserve
              $ curl https://circleci.com/api/v1/me?circle-token=:token

      %li
        You should see a response like the following:
        %pre{style: "overflow:scroll"}
          %code.no-highlight{style: "overflow:scroll"}<>
            :preserve
              {
                "user_key_fingerprint" : null,
                "days_left_in_trial" : -238,
                "plan" : "p16",
                "trial_end" : "2011-12-28T22:02:15Z",
                "tokens" : [ {
                  "label" : "CCMenu",
                  "token" : ":token",
                  "time" : "2012-05-27T05:26:21Z"
                } ],
                "basic_email_prefs" : "smart",
                "admin" : true,
                "login" : "pbiggar"
              }

    = HAML['heading']({title: "Making calls", hash: "calling"})
    %p
      All API calls are made in the same way, by making standard HTTP calls, using JSON, a content-type, and your API token.
      All Circle API endpoints begin in
      <code>"https://circleci.com/api/v1/"</code>.

    %h2 Authentication
    %p
      To authenticate, add an API token using your
      = succeed '.', ->
        %a{ href: "https://circleci.com/account/api"} account dashboard
      To use the API token, add it to the
      %code circle-token
      query param, like so:

    %pre
      %code.no-highlight<>
        :preserve
          curl https://circleci.com/api/v1/me?circle-token=:token

    %h2 Accept header
    %p
      If you specify no accept header, we'll return human-readable JSON with comments.
      If you prefer to receive compact JSON with no whitespace or comments, add the <code>"application/json" Accept header</code>.
      Using <code>curl</code>:

    %pre
      %code.no-highlight<>
        :preserve
          curl https://circleci.com/api/v1/me?circle-token=:token -H "Accept: application/json"


    = HAML['heading']({title: "User", hash: "user"})
    = HAML['api_reference_block']({api_data: api_data, url: "me", try_it: true})

    = HAML['heading']({title: "Projects", hash: "projects"})
    = HAML['api_reference_block']({api_data: api_data, url: 'projects', try_it: true})

    = HAML['heading']({title: "Recent Builds Across All Projects", hash: "recent-builds"})
    = HAML['api_reference_block']({api_data: api_data, url: 'recent-builds', try_it: true})

    = HAML['heading']({title: "Recent Builds For a Single Project", hash: "recent-builds-project"})
    = HAML['api_reference_block']({api_data: api_data, url: 'project/:username/:project'})
    %p
      You can narrow the builds to a single branch by appending /tree/:branch to the url:
      %p
        %code.no-highlight https://circleci.com/api/v1/project/:username/:project/tree/:branch
      The branch name should be url-encoded.


    = HAML['heading']({title: "Single Build", hash: "single-build"})
    = HAML['api_reference_block']({api_data: api_data, url: 'project/:username/:project/:build_num'})

    = HAML['heading']({title: "Retry a Build", hash: "retry-build"})
    = HAML['api_reference_block']({api_data: api_data, url: 'project/:username/:project/:build_num/retry'})

    %p
      You can retry a build with ssh by swapping "retry" with "ssh":
      %p
        %code.no-highlight https://circleci.com/api/v1/project/:username/:project/:build_num/ssh

    = HAML['heading']({title: "Clear Cache", hash: "clear-cache"})
    = HAML['api_reference_block']({api_data: api_data, url: 'project/:username/:project/build-cache'})

    = HAML['heading']({title: "Summary", hash: "summary"})
    %dl.dl-horizontal
    - for own url, data of api_data
      %dt
        = "#{data.method}: /#{url}"
      %dd
        = data.description
