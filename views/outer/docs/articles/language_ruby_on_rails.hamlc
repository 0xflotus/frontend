- @title = 'Continuous Integration and Continuous Deployment with Ruby and Rails'
- @short_title = 'Ruby and Rails'
- @lastUpdated = "Jun 4, 2013"

%h2 Overview

%p
  Good tests make good code.
  Rails was developed and structured to incorporate robust testing functionality.

%p
  CircleCI makes Rails testing simple and uncomplicated.
  CircleCI looks at your code, infers your build environment, and runs your tests.
  The majority of the time, this just works&mdash;and works well.
  Of course, it helps if your project adheres to standard practices
  (i.e., "convention over configuration") for the Ruby on Rails testing framework.
  For that reason, the best method is to specify all your project dependencies in a Gemfile.

%p
  We use
  %a{ href: "https://rvm.io/" } RVM
  to provide access to a wide variety of Ruby versions.
  CircleCI has a number of Ruby- and Rails-related tools and frameworks
  pre-installed so that you can use them directly if needed.
  These include:

%ul
  %li
    Bundler

  %li
    Cucumber

  %li
    RSpec

  %li
    Rake

%p
  For more specifics, you can look at our
    %a{href: "/docs/environment"} Test environment
  documentation, which includes a complete listing of all the versions of Ruby
  that we support as well as a brief description of how CircleCI selects the
  default version of Ruby.
  The document also describes how CircleCI makes it easy to use testing tools that require a browser.

%p
  As we mentioned, CircleCI automatically infers your settings from your code.
  This works fine in most cases for our Ruby on Rails customers.
  When it doesn't (your web app has a special dependency, for example),
  all that you need to do is add a <code>circle.yml</code> file.
  You can find all the information that you need to create that file in our
  %a{href: "/docs/configuration"} Configuring CircleCI
  document.

%p
  Should you need to run your tests in parallel, you can choose a plan and
  set up parallelism for your project on the <b>Edit settings > Build Speed</b> page.
  CircleCI automatically sets up for RSpec, Cucumber, and Test::Unit.
  If you've overridden the test command or have other custom requirements,
  you might want to read
  %a{href: "/docs/parallel-manual-setup"} this document
  first.

%h2#troubleshooting Troubleshooting for Ruby on Rails

%p
  Our
  %a{href: "/docs/troubleshooting-ruby"}
    Ruby Troubleshooting
  documentation has information about the following issues and problems:

%ul
  %li
    Do you need the latest version of Bundler?

  %li
    Error message: "unable to obtain stable firefox connection in 60 seconds"

  %li
    Git errors during a bundle install

  %li
    rake db:schema:load fails

  %li
    CircleCI is running the wrong Ruby commands

  %li
    CircleCI uses the wrong Ruby version
%p
  If you still having trouble, please
  != HAML.contact_us({succeed: ""})
  and we will be happy to help.
