%article
  = HAML['article_title']({icon: "icon-question-sign", title: 'FAQ', lastUpdated: "Aug 1, 2012", subtitle: "Frequently asked questions, and questions which should be asked more frequently"})

  .doc

    = HAML['heading']({title: "Why does Circle need all those permissions?", hash: "permissions"})

    %p
      We would love to ask for less permissions than we do, but
      %a{href: "http://developer.github.com/v3/oauth/#scopes"}
        GitHub only provides very coarse grained permissions
      unfortunately.

    %p
      Circle actually needs the following concrete permissions:

    %ul
      %li add deploy keys to a repo
      %li add service hooks to a repo
      %li get a list of a user's repos
      %li get a user's email address
      %li (in some cases) add an SSH key to a user's account

    %p
      The first two obviously need write-permission to a repo.
      Getting a list of a user's repos requires write-access because GitHub does not provide a way to ask for only read-access.
      If that were possible, then we could delay asking for write-permission until we actually needed it.

    %p
      Similarly, while adding an SSH key to your user is only occasionally needed, finding out your email address currently requires write-access in GitHub's model.

    %p
      We feel strongly about only asking for the permissions we need, and have asked GitHub to help a number of times.
      If you also feel strongly, please reach out to GitHub and tell them it's important to you.


    = HAML['heading']({title: "What happens when you add a project?", hash: "what-happens"})
    %p
      Generally, pretty much what you'd expect if you were implementing this yourself:

    %ul
      %li
        Using the permissions you gave us when you signed up, we'll add some settings to your project on GitHub:
        %ul
          %li
            A
            %b deploy key
            is used to check your project out from GitHub,
          %li
            A
            %b service hook
            is used to notify Circle when you push to GitHub.
      %li
        We immediately check your code out onto our machines, infer your settings, and run your first build.
      %li
        Our inference algorithms looks through your dependencies, Gems, libraries and code to figure out how to run your tests.
        For example, we might find that you have a standard Rails project using Postgres, with specs and features, so we'll run:
        %ol
          %li
            bundle install
          %li
            bundle exec rake db:schema:load
          %li
            bundle exec rspec spec
          %li
            bundle exec cucumber
      %li
        We run your tests on a clean virtual machine every time.
        This means that your code isn't accessible to other users, and that we run your tests freshly each time you push.
      %li
        You can watch your tests update in real-time on
        = succeed ".", ->
          %a{href: "/"} your dashboard
      %li
        We'll send you a notification when you're done.


    = HAML['heading']({title: "Does Circle look at my code?", hash: "look-at-code"})
    %p
      Nobody from Circle manually looks at your code, without permission.
      We will occasionally ask permission to debug why your code isn't working, but we will never look at your code without this permission.
      Our
      %a{ href: "/privacy#security" }
        security policy
      goes into more detail about our safeguards to ensure the security of your code.


    = HAML['heading']({title: "Does parallelism really work?", hash: "parallelism"})
    %p
      If you've ever tried a parallel testing solution, you've probably had a bad experience.
      Most attempt to run multiple tests within the same language runtime, or within multiple processes on the same system.

    %p
      Circle doesn't do that.
      We split your tests up and run them on completely different machines, which share no memory, processes or databases.
      This fixes the vast majority of the problems that people experience with parallel testing.

    %p
      Parallelism works if tests do not share any state.
      Occasionally tests share state by accident, for example through
      %a{href: "/docs/common-problems#file-ordering"}
        file-ordering bugs
      or by using the same remote 3rd-party APIs.
      Fortunately, both problems are relatively easy to solve.


    = HAML['heading']({title: "What software versions do you use?", hash: "versions"})
    %p
      See our
      %a{href: "/docs/environment"} Circle Environment
      documentation for every detail we can think to provide you.

    = HAML['heading']({title: "Can I test projects with unusual requirements?", hash: "unusual"})

    %p
      Circle is completely configurable.
      While we have a very simple setup for projects that follow established conventions, we also support many variations on the theme.

    %ul
      %li
        We support
        %a{href: "/docs/configuration#subdirectory"} running tests from a subdirectory of your repository.

      %li
        You can completely
        %a{href: "/docs/configuration"} override every single step of your tests
        with custom settings, or minor tweaks.

    = HAML['heading']({title: "Can I use resources which are not in my repository?", hash: "external-resources"})

    %p
      Yes!
      There are a number of techniques to do this:

    %ul
      Circle supports
      = succeed ',', ->
        %code git submodule
      and has advanced SSH key management to let you access multiple repositories from a single test suite.
      From
      %a{ href: "https://circleci.com/account/ssh"}
        your accounts page
      you can add a "user key" with one-click, allowing you access code from multiple repositories in your test suite.
      Git submodules can be easily set up in your
      %code circle.yml
      file (see
      = succeed ').', ->
        %a{ href: "https://circleci.com/docs/configuration#checkout"}
          example 1


    %ul
      Circle's VMs are connected to the internet. You can download them directly while setting up your project, using
      %code curl
      or
      = succeed '.', ->
        %code wget

    = HAML['heading']({title: "Why can I not follow a project?", hash: "cant-follow"})
    %p

      GitHub requires admin permissions to add an SSH key to a
      project, and to add the webhook that tells Circle when someone
      pushes new code. If you're not an admin, invite a user with
      permissions to Circle, and have them follow the project first.
