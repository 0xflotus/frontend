Welcome to the Circle application. The frontend - contained in this directory - is a fairly standard
rails app, with notable non-standard things being JRuby and mongodb. The backend is a standard
clojure app, and is also in this directory.

The backend is run in the same process as the frontend. This all works so long as you use RVM.


# Communicating between the frontend and the backend.

- To call clojure from ruby, esp for workers, see lib/Backend.rb
- To call ruby from clojure, see src/Circle/ruby.clj
- Both ends use the same mongodb database. Synchronization occurs in src/circle/db.clj and config/environements/*.rb



## Setting up dependencies.

* install RVM
  $ bash < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer) # dont use your package manager.
  $ rvm install jruby
  $ rvm gemset create circle
  $ gem install bundler --pre
  $ cd CircleCI
  $ bundle install
    This should activate rvm, and rvm should print a message to that effect)


## Environments and environmental variables

   - set circlehost to 127.0.0.1 in your /etc/hosts
   - set CIRCLE_SWANK=true to connect to your VM via emacs+slime.
     - M-x slime-connect -> 127.0.0.1 -> 4005
     - only accessible from the same box, must ssh to it.


   - Environments are set using RAILS_ENV. Options are:
     - development
       - default
       - runs on circlehost:3000
       - swank runs on port 4005

     - test
       - set by default for rspec
       - swank is on port 4006
       - runs on circlehost:3001
       - To run rspec fast, do:
         $ RAILS_ENV=test CIRCLE_SWANK=true rails console
         - then connect visa swank and run (circle.ruby/rspec)

     - production
       - DANGER: live database. If running on your local machine, be very fucking careful.
       - sits behind the nginx load balancer

     - staging
       - currently has no load balancer
       - should run on staging.circleci.com


# Deploying to production

Set the lb-name flag in your DB:

    $ mongo circle
    > p = db.projects.find({vcs_url: "https://github.com/circleci/cricle"})[0]
    > p["lb-name"] = "www"
    > db.projects.save(p)

From any REPL, run the command:

    > (def b (circle.backend.build.config/build-from-url "https://github.com/circleci/circle" :job-name :deploy))
    > (clojure.pprint/pprint b)  ;; inspect the build
    > (circle.backend.build.run/run-build b) ;; actually deploy

Watch the console output to see if it's finished, and look at (print-instances)
in a repl to see more information about the nodes.


## Building an AMI:

We currently use a single AMI for all customer nodes. To build a new one:

 - edit the AMI pallet definition: rails-group in circle/backend/nodes/rails.clj
 - initialize a test AMI from the definition:

   > (def group circle.backend.nodes.rails/rails-group)
   > (circle.backend.nodes/start-and-configure group)

 - Turn it into a proper AMI:

   > (circle.backend.nodes/memoize-group-spec group "some name for the image")
   So far, the naming convention is "rails-<date in big endian>", i.e. "rails-20120210"


 - Edit the source to use this image: set the :ami value in rails-node in
   circle/backend/nodes/rails.clj to the new AMI name.

You can start up a standard customer AMI from the repl using:
 - (circle.backend.nodes/start-instance)


Software versions:

  Postgres:
    Heroku uses 9.0.4 - http://devcenter.heroku.com/articles/heroku-postgresql
    EY uses 9.1.1 (supports 8.4.2)

  Redis:
    RedisToGo uses Redis 2.4.2 - according to Stuart
    Latest stable is 2.4.7 - http://redis.io/download
    2.6 expected in 2013 - http://redis.io/download
    Resque requires 0.9

  Mongo
    MongoHQ uses Mongodb 2.0.2 (says the last customer email they sent)

    Mongoid versions:
      Mongoid 2.0.0 requires MongoDB 1.6.0
      Mongoid 2.1.0 requires MongoDB 1.8.0
      Mongoid 2.3.0 requires MongoDB 2.0.0

  NodeJS
    EY uses 0.6.8
    0.6 brought NPM

  MySQL:
    EY uses 5.1.55, supports 5.5.13 (beta) and 5.0.51

  Memcached:

  Sphinx:
    ThinkingSphinx (rails gem) doesn't say anything about the sphinx version

  Riak:



References:
  http://docs.engineyard.com/cloud-tech-stack.html
